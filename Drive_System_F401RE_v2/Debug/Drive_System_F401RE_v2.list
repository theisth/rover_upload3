
Drive_System_F401RE_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000525c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080053f4  080053f4  000153f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005414  08005414  00020058  2**0
                  CONTENTS
  4 .ARM          00000008  08005414  08005414  00015414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800541c  0800541c  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800541c  0800541c  0001541c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005420  08005420  00015420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08005424  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  20000058  0800547c  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  0800547c  0002034c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dee0  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b92  00000000  00000000  0002df68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  0002fb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd8  00000000  00000000  00030770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001cec  00000000  00000000  00031348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e8e8  00000000  00000000  00033034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008defa  00000000  00000000  0004191c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf816  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003604  00000000  00000000  000cf868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000058 	.word	0x20000058
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080053dc 	.word	0x080053dc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000005c 	.word	0x2000005c
 80001d4:	080053dc 	.word	0x080053dc

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2iz>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ac:	d215      	bcs.n	80007da <__aeabi_d2iz+0x36>
 80007ae:	d511      	bpl.n	80007d4 <__aeabi_d2iz+0x30>
 80007b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b8:	d912      	bls.n	80007e0 <__aeabi_d2iz+0x3c>
 80007ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007ca:	fa23 f002 	lsr.w	r0, r3, r2
 80007ce:	bf18      	it	ne
 80007d0:	4240      	negne	r0, r0
 80007d2:	4770      	bx	lr
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	4770      	bx	lr
 80007da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007de:	d105      	bne.n	80007ec <__aeabi_d2iz+0x48>
 80007e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80007e4:	bf08      	it	eq
 80007e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80007ea:	4770      	bx	lr
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop

080007f4 <__aeabi_d2f>:
 80007f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007fc:	bf24      	itt	cs
 80007fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000802:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000806:	d90d      	bls.n	8000824 <__aeabi_d2f+0x30>
 8000808:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800080c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000810:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000814:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000818:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800081c:	bf08      	it	eq
 800081e:	f020 0001 	biceq.w	r0, r0, #1
 8000822:	4770      	bx	lr
 8000824:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000828:	d121      	bne.n	800086e <__aeabi_d2f+0x7a>
 800082a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800082e:	bfbc      	itt	lt
 8000830:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000834:	4770      	bxlt	lr
 8000836:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800083a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800083e:	f1c2 0218 	rsb	r2, r2, #24
 8000842:	f1c2 0c20 	rsb	ip, r2, #32
 8000846:	fa10 f30c 	lsls.w	r3, r0, ip
 800084a:	fa20 f002 	lsr.w	r0, r0, r2
 800084e:	bf18      	it	ne
 8000850:	f040 0001 	orrne.w	r0, r0, #1
 8000854:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000858:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800085c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000860:	ea40 000c 	orr.w	r0, r0, ip
 8000864:	fa23 f302 	lsr.w	r3, r3, r2
 8000868:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800086c:	e7cc      	b.n	8000808 <__aeabi_d2f+0x14>
 800086e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000872:	d107      	bne.n	8000884 <__aeabi_d2f+0x90>
 8000874:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000878:	bf1e      	ittt	ne
 800087a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800087e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000882:	4770      	bxne	lr
 8000884:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000888:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800088c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop

08000894 <__aeabi_uldivmod>:
 8000894:	b953      	cbnz	r3, 80008ac <__aeabi_uldivmod+0x18>
 8000896:	b94a      	cbnz	r2, 80008ac <__aeabi_uldivmod+0x18>
 8000898:	2900      	cmp	r1, #0
 800089a:	bf08      	it	eq
 800089c:	2800      	cmpeq	r0, #0
 800089e:	bf1c      	itt	ne
 80008a0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80008a4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008a8:	f000 b974 	b.w	8000b94 <__aeabi_idiv0>
 80008ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008b4:	f000 f806 	bl	80008c4 <__udivmoddi4>
 80008b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c0:	b004      	add	sp, #16
 80008c2:	4770      	bx	lr

080008c4 <__udivmoddi4>:
 80008c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c8:	9d08      	ldr	r5, [sp, #32]
 80008ca:	4604      	mov	r4, r0
 80008cc:	468e      	mov	lr, r1
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d14d      	bne.n	800096e <__udivmoddi4+0xaa>
 80008d2:	428a      	cmp	r2, r1
 80008d4:	4694      	mov	ip, r2
 80008d6:	d969      	bls.n	80009ac <__udivmoddi4+0xe8>
 80008d8:	fab2 f282 	clz	r2, r2
 80008dc:	b152      	cbz	r2, 80008f4 <__udivmoddi4+0x30>
 80008de:	fa01 f302 	lsl.w	r3, r1, r2
 80008e2:	f1c2 0120 	rsb	r1, r2, #32
 80008e6:	fa20 f101 	lsr.w	r1, r0, r1
 80008ea:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ee:	ea41 0e03 	orr.w	lr, r1, r3
 80008f2:	4094      	lsls	r4, r2
 80008f4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008f8:	0c21      	lsrs	r1, r4, #16
 80008fa:	fbbe f6f8 	udiv	r6, lr, r8
 80008fe:	fa1f f78c 	uxth.w	r7, ip
 8000902:	fb08 e316 	mls	r3, r8, r6, lr
 8000906:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800090a:	fb06 f107 	mul.w	r1, r6, r7
 800090e:	4299      	cmp	r1, r3
 8000910:	d90a      	bls.n	8000928 <__udivmoddi4+0x64>
 8000912:	eb1c 0303 	adds.w	r3, ip, r3
 8000916:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800091a:	f080 811f 	bcs.w	8000b5c <__udivmoddi4+0x298>
 800091e:	4299      	cmp	r1, r3
 8000920:	f240 811c 	bls.w	8000b5c <__udivmoddi4+0x298>
 8000924:	3e02      	subs	r6, #2
 8000926:	4463      	add	r3, ip
 8000928:	1a5b      	subs	r3, r3, r1
 800092a:	b2a4      	uxth	r4, r4
 800092c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000930:	fb08 3310 	mls	r3, r8, r0, r3
 8000934:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000938:	fb00 f707 	mul.w	r7, r0, r7
 800093c:	42a7      	cmp	r7, r4
 800093e:	d90a      	bls.n	8000956 <__udivmoddi4+0x92>
 8000940:	eb1c 0404 	adds.w	r4, ip, r4
 8000944:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000948:	f080 810a 	bcs.w	8000b60 <__udivmoddi4+0x29c>
 800094c:	42a7      	cmp	r7, r4
 800094e:	f240 8107 	bls.w	8000b60 <__udivmoddi4+0x29c>
 8000952:	4464      	add	r4, ip
 8000954:	3802      	subs	r0, #2
 8000956:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800095a:	1be4      	subs	r4, r4, r7
 800095c:	2600      	movs	r6, #0
 800095e:	b11d      	cbz	r5, 8000968 <__udivmoddi4+0xa4>
 8000960:	40d4      	lsrs	r4, r2
 8000962:	2300      	movs	r3, #0
 8000964:	e9c5 4300 	strd	r4, r3, [r5]
 8000968:	4631      	mov	r1, r6
 800096a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800096e:	428b      	cmp	r3, r1
 8000970:	d909      	bls.n	8000986 <__udivmoddi4+0xc2>
 8000972:	2d00      	cmp	r5, #0
 8000974:	f000 80ef 	beq.w	8000b56 <__udivmoddi4+0x292>
 8000978:	2600      	movs	r6, #0
 800097a:	e9c5 0100 	strd	r0, r1, [r5]
 800097e:	4630      	mov	r0, r6
 8000980:	4631      	mov	r1, r6
 8000982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000986:	fab3 f683 	clz	r6, r3
 800098a:	2e00      	cmp	r6, #0
 800098c:	d14a      	bne.n	8000a24 <__udivmoddi4+0x160>
 800098e:	428b      	cmp	r3, r1
 8000990:	d302      	bcc.n	8000998 <__udivmoddi4+0xd4>
 8000992:	4282      	cmp	r2, r0
 8000994:	f200 80f9 	bhi.w	8000b8a <__udivmoddi4+0x2c6>
 8000998:	1a84      	subs	r4, r0, r2
 800099a:	eb61 0303 	sbc.w	r3, r1, r3
 800099e:	2001      	movs	r0, #1
 80009a0:	469e      	mov	lr, r3
 80009a2:	2d00      	cmp	r5, #0
 80009a4:	d0e0      	beq.n	8000968 <__udivmoddi4+0xa4>
 80009a6:	e9c5 4e00 	strd	r4, lr, [r5]
 80009aa:	e7dd      	b.n	8000968 <__udivmoddi4+0xa4>
 80009ac:	b902      	cbnz	r2, 80009b0 <__udivmoddi4+0xec>
 80009ae:	deff      	udf	#255	; 0xff
 80009b0:	fab2 f282 	clz	r2, r2
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	f040 8092 	bne.w	8000ade <__udivmoddi4+0x21a>
 80009ba:	eba1 010c 	sub.w	r1, r1, ip
 80009be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009c2:	fa1f fe8c 	uxth.w	lr, ip
 80009c6:	2601      	movs	r6, #1
 80009c8:	0c20      	lsrs	r0, r4, #16
 80009ca:	fbb1 f3f7 	udiv	r3, r1, r7
 80009ce:	fb07 1113 	mls	r1, r7, r3, r1
 80009d2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009d6:	fb0e f003 	mul.w	r0, lr, r3
 80009da:	4288      	cmp	r0, r1
 80009dc:	d908      	bls.n	80009f0 <__udivmoddi4+0x12c>
 80009de:	eb1c 0101 	adds.w	r1, ip, r1
 80009e2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80009e6:	d202      	bcs.n	80009ee <__udivmoddi4+0x12a>
 80009e8:	4288      	cmp	r0, r1
 80009ea:	f200 80cb 	bhi.w	8000b84 <__udivmoddi4+0x2c0>
 80009ee:	4643      	mov	r3, r8
 80009f0:	1a09      	subs	r1, r1, r0
 80009f2:	b2a4      	uxth	r4, r4
 80009f4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009f8:	fb07 1110 	mls	r1, r7, r0, r1
 80009fc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a00:	fb0e fe00 	mul.w	lr, lr, r0
 8000a04:	45a6      	cmp	lr, r4
 8000a06:	d908      	bls.n	8000a1a <__udivmoddi4+0x156>
 8000a08:	eb1c 0404 	adds.w	r4, ip, r4
 8000a0c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000a10:	d202      	bcs.n	8000a18 <__udivmoddi4+0x154>
 8000a12:	45a6      	cmp	lr, r4
 8000a14:	f200 80bb 	bhi.w	8000b8e <__udivmoddi4+0x2ca>
 8000a18:	4608      	mov	r0, r1
 8000a1a:	eba4 040e 	sub.w	r4, r4, lr
 8000a1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a22:	e79c      	b.n	800095e <__udivmoddi4+0x9a>
 8000a24:	f1c6 0720 	rsb	r7, r6, #32
 8000a28:	40b3      	lsls	r3, r6
 8000a2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a32:	fa20 f407 	lsr.w	r4, r0, r7
 8000a36:	fa01 f306 	lsl.w	r3, r1, r6
 8000a3a:	431c      	orrs	r4, r3
 8000a3c:	40f9      	lsrs	r1, r7
 8000a3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a42:	fa00 f306 	lsl.w	r3, r0, r6
 8000a46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a4a:	0c20      	lsrs	r0, r4, #16
 8000a4c:	fa1f fe8c 	uxth.w	lr, ip
 8000a50:	fb09 1118 	mls	r1, r9, r8, r1
 8000a54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a58:	fb08 f00e 	mul.w	r0, r8, lr
 8000a5c:	4288      	cmp	r0, r1
 8000a5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a62:	d90b      	bls.n	8000a7c <__udivmoddi4+0x1b8>
 8000a64:	eb1c 0101 	adds.w	r1, ip, r1
 8000a68:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000a6c:	f080 8088 	bcs.w	8000b80 <__udivmoddi4+0x2bc>
 8000a70:	4288      	cmp	r0, r1
 8000a72:	f240 8085 	bls.w	8000b80 <__udivmoddi4+0x2bc>
 8000a76:	f1a8 0802 	sub.w	r8, r8, #2
 8000a7a:	4461      	add	r1, ip
 8000a7c:	1a09      	subs	r1, r1, r0
 8000a7e:	b2a4      	uxth	r4, r4
 8000a80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a84:	fb09 1110 	mls	r1, r9, r0, r1
 8000a88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a90:	458e      	cmp	lr, r1
 8000a92:	d908      	bls.n	8000aa6 <__udivmoddi4+0x1e2>
 8000a94:	eb1c 0101 	adds.w	r1, ip, r1
 8000a98:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000a9c:	d26c      	bcs.n	8000b78 <__udivmoddi4+0x2b4>
 8000a9e:	458e      	cmp	lr, r1
 8000aa0:	d96a      	bls.n	8000b78 <__udivmoddi4+0x2b4>
 8000aa2:	3802      	subs	r0, #2
 8000aa4:	4461      	add	r1, ip
 8000aa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000aaa:	fba0 9402 	umull	r9, r4, r0, r2
 8000aae:	eba1 010e 	sub.w	r1, r1, lr
 8000ab2:	42a1      	cmp	r1, r4
 8000ab4:	46c8      	mov	r8, r9
 8000ab6:	46a6      	mov	lr, r4
 8000ab8:	d356      	bcc.n	8000b68 <__udivmoddi4+0x2a4>
 8000aba:	d053      	beq.n	8000b64 <__udivmoddi4+0x2a0>
 8000abc:	b15d      	cbz	r5, 8000ad6 <__udivmoddi4+0x212>
 8000abe:	ebb3 0208 	subs.w	r2, r3, r8
 8000ac2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ac6:	fa01 f707 	lsl.w	r7, r1, r7
 8000aca:	fa22 f306 	lsr.w	r3, r2, r6
 8000ace:	40f1      	lsrs	r1, r6
 8000ad0:	431f      	orrs	r7, r3
 8000ad2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ad6:	2600      	movs	r6, #0
 8000ad8:	4631      	mov	r1, r6
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	f1c2 0320 	rsb	r3, r2, #32
 8000ae2:	40d8      	lsrs	r0, r3
 8000ae4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae8:	fa21 f303 	lsr.w	r3, r1, r3
 8000aec:	4091      	lsls	r1, r2
 8000aee:	4301      	orrs	r1, r0
 8000af0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af4:	fa1f fe8c 	uxth.w	lr, ip
 8000af8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000afc:	fb07 3610 	mls	r6, r7, r0, r3
 8000b00:	0c0b      	lsrs	r3, r1, #16
 8000b02:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b06:	fb00 f60e 	mul.w	r6, r0, lr
 8000b0a:	429e      	cmp	r6, r3
 8000b0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000b10:	d908      	bls.n	8000b24 <__udivmoddi4+0x260>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000b1a:	d22f      	bcs.n	8000b7c <__udivmoddi4+0x2b8>
 8000b1c:	429e      	cmp	r6, r3
 8000b1e:	d92d      	bls.n	8000b7c <__udivmoddi4+0x2b8>
 8000b20:	3802      	subs	r0, #2
 8000b22:	4463      	add	r3, ip
 8000b24:	1b9b      	subs	r3, r3, r6
 8000b26:	b289      	uxth	r1, r1
 8000b28:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b2c:	fb07 3316 	mls	r3, r7, r6, r3
 8000b30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b34:	fb06 f30e 	mul.w	r3, r6, lr
 8000b38:	428b      	cmp	r3, r1
 8000b3a:	d908      	bls.n	8000b4e <__udivmoddi4+0x28a>
 8000b3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b40:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000b44:	d216      	bcs.n	8000b74 <__udivmoddi4+0x2b0>
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d914      	bls.n	8000b74 <__udivmoddi4+0x2b0>
 8000b4a:	3e02      	subs	r6, #2
 8000b4c:	4461      	add	r1, ip
 8000b4e:	1ac9      	subs	r1, r1, r3
 8000b50:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b54:	e738      	b.n	80009c8 <__udivmoddi4+0x104>
 8000b56:	462e      	mov	r6, r5
 8000b58:	4628      	mov	r0, r5
 8000b5a:	e705      	b.n	8000968 <__udivmoddi4+0xa4>
 8000b5c:	4606      	mov	r6, r0
 8000b5e:	e6e3      	b.n	8000928 <__udivmoddi4+0x64>
 8000b60:	4618      	mov	r0, r3
 8000b62:	e6f8      	b.n	8000956 <__udivmoddi4+0x92>
 8000b64:	454b      	cmp	r3, r9
 8000b66:	d2a9      	bcs.n	8000abc <__udivmoddi4+0x1f8>
 8000b68:	ebb9 0802 	subs.w	r8, r9, r2
 8000b6c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b70:	3801      	subs	r0, #1
 8000b72:	e7a3      	b.n	8000abc <__udivmoddi4+0x1f8>
 8000b74:	4646      	mov	r6, r8
 8000b76:	e7ea      	b.n	8000b4e <__udivmoddi4+0x28a>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	e794      	b.n	8000aa6 <__udivmoddi4+0x1e2>
 8000b7c:	4640      	mov	r0, r8
 8000b7e:	e7d1      	b.n	8000b24 <__udivmoddi4+0x260>
 8000b80:	46d0      	mov	r8, sl
 8000b82:	e77b      	b.n	8000a7c <__udivmoddi4+0x1b8>
 8000b84:	3b02      	subs	r3, #2
 8000b86:	4461      	add	r1, ip
 8000b88:	e732      	b.n	80009f0 <__udivmoddi4+0x12c>
 8000b8a:	4630      	mov	r0, r6
 8000b8c:	e709      	b.n	80009a2 <__udivmoddi4+0xde>
 8000b8e:	4464      	add	r4, ip
 8000b90:	3802      	subs	r0, #2
 8000b92:	e742      	b.n	8000a1a <__udivmoddi4+0x156>

08000b94 <__aeabi_idiv0>:
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <HAL_UART_RxCpltCallback>:
uint32_t tim3_counter=0;
uint8_t transmitbuffer[44]={0};
uint8_t datax=0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  if (huart == &huart2){
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a06      	ldr	r2, [pc, #24]	; (8000bbc <HAL_UART_RxCpltCallback+0x24>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d102      	bne.n	8000bae <HAL_UART_RxCpltCallback+0x16>
    rxfull = 1;
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <HAL_UART_RxCpltCallback+0x28>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	701a      	strb	r2, [r3, #0]
  }
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	20000224 	.word	0x20000224
 8000bc0:	20000324 	.word	0x20000324

08000bc4 <HAL_TIM_PeriodElapsedCallback>:
//        //	   	         				|  |
//        //		         				|  |
//        //	HAL_TIM_ACTIVE_CHANNEL_3 ||------|| HAL_TIM_ACTIVE_CHANNEL_4


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	velocityCalculationFlag = true;
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	701a      	strb	r2, [r3, #0]
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	20000000 	.word	0x20000000
 8000be4:	00000000 	.word	0x00000000

08000be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bec:	f001 f9e6 	bl	8001fbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf0:	f000 fb74 	bl	80012dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf4:	f000 fe82 	bl	80018fc <MX_GPIO_Init>
  MX_DMA_Init();
 8000bf8:	f000 fe60 	bl	80018bc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000bfc:	f000 fe0a 	bl	8001814 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000c00:	f000 fbd6 	bl	80013b0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c04:	f000 fc7c 	bl	8001500 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c08:	f000 fcce 	bl	80015a8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c0c:	f000 fd20 	bl	8001650 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000c10:	f000 fd72 	bl	80016f8 <MX_TIM5_Init>
  MX_TIM9_Init();
 8000c14:	f000 fdc4 	bl	80017a0 <MX_TIM9_Init>
  MX_USART6_UART_Init();
 8000c18:	f000 fe26 	bl	8001868 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	48b0      	ldr	r0, [pc, #704]	; (8000ee0 <main+0x2f8>)
 8000c20:	f002 fdf8 	bl	8003814 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000c24:	2104      	movs	r1, #4
 8000c26:	48ae      	ldr	r0, [pc, #696]	; (8000ee0 <main+0x2f8>)
 8000c28:	f002 fdf4 	bl	8003814 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000c2c:	2108      	movs	r1, #8
 8000c2e:	48ac      	ldr	r0, [pc, #688]	; (8000ee0 <main+0x2f8>)
 8000c30:	f002 fdf0 	bl	8003814 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000c34:	210c      	movs	r1, #12
 8000c36:	48aa      	ldr	r0, [pc, #680]	; (8000ee0 <main+0x2f8>)
 8000c38:	f002 fdec 	bl	8003814 <HAL_TIM_PWM_Start>

  /*------------------------ Encoders -------------------------*/
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	48a9      	ldr	r0, [pc, #676]	; (8000ee4 <main+0x2fc>)
 8000c40:	f002 ff3e 	bl	8003ac0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);
 8000c44:	2104      	movs	r1, #4
 8000c46:	48a7      	ldr	r0, [pc, #668]	; (8000ee4 <main+0x2fc>)
 8000c48:	f002 ff3a 	bl	8003ac0 <HAL_TIM_Encoder_Start>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	48a6      	ldr	r0, [pc, #664]	; (8000ee8 <main+0x300>)
 8000c50:	f002 ff36 	bl	8003ac0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 8000c54:	2104      	movs	r1, #4
 8000c56:	48a4      	ldr	r0, [pc, #656]	; (8000ee8 <main+0x300>)
 8000c58:	f002 ff32 	bl	8003ac0 <HAL_TIM_Encoder_Start>

  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	48a3      	ldr	r0, [pc, #652]	; (8000eec <main+0x304>)
 8000c60:	f002 ff2e 	bl	8003ac0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 8000c64:	2104      	movs	r1, #4
 8000c66:	48a1      	ldr	r0, [pc, #644]	; (8000eec <main+0x304>)
 8000c68:	f002 ff2a 	bl	8003ac0 <HAL_TIM_Encoder_Start>

  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1);
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	48a0      	ldr	r0, [pc, #640]	; (8000ef0 <main+0x308>)
 8000c70:	f002 ff26 	bl	8003ac0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_2);
 8000c74:	2104      	movs	r1, #4
 8000c76:	489e      	ldr	r0, [pc, #632]	; (8000ef0 <main+0x308>)
 8000c78:	f002 ff22 	bl	8003ac0 <HAL_TIM_Encoder_Start>


  HAL_TIM_Base_Start_IT(&htim9);
 8000c7c:	489d      	ldr	r0, [pc, #628]	; (8000ef4 <main+0x30c>)
 8000c7e:	f002 fd17 	bl	80036b0 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_DMA(&huart2, rxbuff, 8);
 8000c82:	2208      	movs	r2, #8
 8000c84:	499c      	ldr	r1, [pc, #624]	; (8000ef8 <main+0x310>)
 8000c86:	489d      	ldr	r0, [pc, #628]	; (8000efc <main+0x314>)
 8000c88:	f003 fe4f 	bl	800492a <HAL_UART_Receive_DMA>
  rxfull = 0;
 8000c8c:	4b9c      	ldr	r3, [pc, #624]	; (8000f00 <main+0x318>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      if (rxfull == 1){
 8000c92:	4b9b      	ldr	r3, [pc, #620]	; (8000f00 <main+0x318>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d13c      	bne.n	8000d14 <main+0x12c>
        rxfull = 0;
 8000c9a:	4b99      	ldr	r3, [pc, #612]	; (8000f00 <main+0x318>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]
        linear_number = (int32_t)(rxbuff[0]<<24) + (int32_t)(rxbuff[1]<<16) + (int32_t)(rxbuff[2]<<8) + rxbuff[3];
 8000ca0:	4b95      	ldr	r3, [pc, #596]	; (8000ef8 <main+0x310>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	061a      	lsls	r2, r3, #24
 8000ca6:	4b94      	ldr	r3, [pc, #592]	; (8000ef8 <main+0x310>)
 8000ca8:	785b      	ldrb	r3, [r3, #1]
 8000caa:	041b      	lsls	r3, r3, #16
 8000cac:	441a      	add	r2, r3
 8000cae:	4b92      	ldr	r3, [pc, #584]	; (8000ef8 <main+0x310>)
 8000cb0:	789b      	ldrb	r3, [r3, #2]
 8000cb2:	021b      	lsls	r3, r3, #8
 8000cb4:	4413      	add	r3, r2
 8000cb6:	4a90      	ldr	r2, [pc, #576]	; (8000ef8 <main+0x310>)
 8000cb8:	78d2      	ldrb	r2, [r2, #3]
 8000cba:	4413      	add	r3, r2
 8000cbc:	4a91      	ldr	r2, [pc, #580]	; (8000f04 <main+0x31c>)
 8000cbe:	6013      	str	r3, [r2, #0]
        angular_number = (int32_t)(rxbuff[4]<<24) + (int32_t)(rxbuff[5]<<16) + (int32_t)(rxbuff[6]<<8) + rxbuff[7];
 8000cc0:	4b8d      	ldr	r3, [pc, #564]	; (8000ef8 <main+0x310>)
 8000cc2:	791b      	ldrb	r3, [r3, #4]
 8000cc4:	061a      	lsls	r2, r3, #24
 8000cc6:	4b8c      	ldr	r3, [pc, #560]	; (8000ef8 <main+0x310>)
 8000cc8:	795b      	ldrb	r3, [r3, #5]
 8000cca:	041b      	lsls	r3, r3, #16
 8000ccc:	441a      	add	r2, r3
 8000cce:	4b8a      	ldr	r3, [pc, #552]	; (8000ef8 <main+0x310>)
 8000cd0:	799b      	ldrb	r3, [r3, #6]
 8000cd2:	021b      	lsls	r3, r3, #8
 8000cd4:	4413      	add	r3, r2
 8000cd6:	4a88      	ldr	r2, [pc, #544]	; (8000ef8 <main+0x310>)
 8000cd8:	79d2      	ldrb	r2, [r2, #7]
 8000cda:	4413      	add	r3, r2
 8000cdc:	4a8a      	ldr	r2, [pc, #552]	; (8000f08 <main+0x320>)
 8000cde:	6013      	str	r3, [r2, #0]

        linearVel_MeterDivSec = ((float)linear_number/1000000.0); // x10
 8000ce0:	4b88      	ldr	r3, [pc, #544]	; (8000f04 <main+0x31c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	ee07 3a90 	vmov	s15, r3
 8000ce8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cec:	eddf 6a87 	vldr	s13, [pc, #540]	; 8000f0c <main+0x324>
 8000cf0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cf4:	4b86      	ldr	r3, [pc, #536]	; (8000f10 <main+0x328>)
 8000cf6:	edc3 7a00 	vstr	s15, [r3]
        angularVel_RadDivSec = ((float)angular_number/1000000.0); // x10
 8000cfa:	4b83      	ldr	r3, [pc, #524]	; (8000f08 <main+0x320>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	ee07 3a90 	vmov	s15, r3
 8000d02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d06:	eddf 6a81 	vldr	s13, [pc, #516]	; 8000f0c <main+0x324>
 8000d0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d0e:	4b81      	ldr	r3, [pc, #516]	; (8000f14 <main+0x32c>)
 8000d10:	edc3 7a00 	vstr	s15, [r3]

     }

	TIM1->CCR1 = R_Rear_WHL.signalPWM;
 8000d14:	4b80      	ldr	r3, [pc, #512]	; (8000f18 <main+0x330>)
 8000d16:	69da      	ldr	r2, [r3, #28]
 8000d18:	4b80      	ldr	r3, [pc, #512]	; (8000f1c <main+0x334>)
 8000d1a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = R_Front_WHL.signalPWM;
 8000d1c:	4b80      	ldr	r3, [pc, #512]	; (8000f20 <main+0x338>)
 8000d1e:	69da      	ldr	r2, [r3, #28]
 8000d20:	4b7e      	ldr	r3, [pc, #504]	; (8000f1c <main+0x334>)
 8000d22:	639a      	str	r2, [r3, #56]	; 0x38
//	TIM1->CCR1 = pwmValue;
//	TIM1->CCR2 = pwmValue;
//	TIM1->CCR3 = pwmValue2;
//	TIM1->CCR4 = pwmValue2;

     if(velocityCalculationFlag){
 8000d24:	4b7f      	ldr	r3, [pc, #508]	; (8000f24 <main+0x33c>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d0b1      	beq.n	8000c92 <main+0xaa>
        		 arrayCounter += 1;
    		 }

    	 }*/

    	 speedLeftWHL = (linearVel_MeterDivSec + angularVel_RadDivSec);
 8000d2e:	4b78      	ldr	r3, [pc, #480]	; (8000f10 <main+0x328>)
 8000d30:	ed93 7a00 	vldr	s14, [r3]
 8000d34:	4b77      	ldr	r3, [pc, #476]	; (8000f14 <main+0x32c>)
 8000d36:	edd3 7a00 	vldr	s15, [r3]
 8000d3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d3e:	4b7a      	ldr	r3, [pc, #488]	; (8000f28 <main+0x340>)
 8000d40:	edc3 7a00 	vstr	s15, [r3]
    	 speedRightWHL = (linearVel_MeterDivSec - angularVel_RadDivSec);
 8000d44:	4b72      	ldr	r3, [pc, #456]	; (8000f10 <main+0x328>)
 8000d46:	ed93 7a00 	vldr	s14, [r3]
 8000d4a:	4b72      	ldr	r3, [pc, #456]	; (8000f14 <main+0x32c>)
 8000d4c:	edd3 7a00 	vldr	s15, [r3]
 8000d50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d54:	4b75      	ldr	r3, [pc, #468]	; (8000f2c <main+0x344>)
 8000d56:	edc3 7a00 	vstr	s15, [r3]

		 LeftFront_EncoderCounter = __HAL_TIM_GET_COUNTER(&htim2);
 8000d5a:	4b62      	ldr	r3, [pc, #392]	; (8000ee4 <main+0x2fc>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d60:	4a73      	ldr	r2, [pc, #460]	; (8000f30 <main+0x348>)
 8000d62:	6013      	str	r3, [r2, #0]
		 if(LeftFront_EncoderCounter>30000)
 8000d64:	4b72      	ldr	r3, [pc, #456]	; (8000f30 <main+0x348>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f247 5230 	movw	r2, #30000	; 0x7530
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d906      	bls.n	8000d7e <main+0x196>
		 {
			 LeftFront_EncoderCounter = 65000 - LeftFront_EncoderCounter;
 8000d70:	4b6f      	ldr	r3, [pc, #444]	; (8000f30 <main+0x348>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f5c3 437d 	rsb	r3, r3, #64768	; 0xfd00
 8000d78:	33e8      	adds	r3, #232	; 0xe8
 8000d7a:	4a6d      	ldr	r2, [pc, #436]	; (8000f30 <main+0x348>)
 8000d7c:	6013      	str	r3, [r2, #0]
		 }
		 LeftRear_EncoderCounter = __HAL_TIM_GET_COUNTER(&htim4);
 8000d7e:	4b5b      	ldr	r3, [pc, #364]	; (8000eec <main+0x304>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d84:	4a6b      	ldr	r2, [pc, #428]	; (8000f34 <main+0x34c>)
 8000d86:	6013      	str	r3, [r2, #0]
		 if(LeftRear_EncoderCounter>30000)
 8000d88:	4b6a      	ldr	r3, [pc, #424]	; (8000f34 <main+0x34c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f247 5230 	movw	r2, #30000	; 0x7530
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d906      	bls.n	8000da2 <main+0x1ba>
		 {
			 LeftRear_EncoderCounter = 65000 - LeftRear_EncoderCounter;
 8000d94:	4b67      	ldr	r3, [pc, #412]	; (8000f34 <main+0x34c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f5c3 437d 	rsb	r3, r3, #64768	; 0xfd00
 8000d9c:	33e8      	adds	r3, #232	; 0xe8
 8000d9e:	4a65      	ldr	r2, [pc, #404]	; (8000f34 <main+0x34c>)
 8000da0:	6013      	str	r3, [r2, #0]
		 }
		 RightFront_EncoderCounter = __HAL_TIM_GET_COUNTER(&htim3);
 8000da2:	4b51      	ldr	r3, [pc, #324]	; (8000ee8 <main+0x300>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da8:	4a63      	ldr	r2, [pc, #396]	; (8000f38 <main+0x350>)
 8000daa:	6013      	str	r3, [r2, #0]
		 if(RightFront_EncoderCounter>30000)
 8000dac:	4b62      	ldr	r3, [pc, #392]	; (8000f38 <main+0x350>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f247 5230 	movw	r2, #30000	; 0x7530
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d906      	bls.n	8000dc6 <main+0x1de>
		 {
			 RightFront_EncoderCounter = 65000 - RightFront_EncoderCounter;
 8000db8:	4b5f      	ldr	r3, [pc, #380]	; (8000f38 <main+0x350>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f5c3 437d 	rsb	r3, r3, #64768	; 0xfd00
 8000dc0:	33e8      	adds	r3, #232	; 0xe8
 8000dc2:	4a5d      	ldr	r2, [pc, #372]	; (8000f38 <main+0x350>)
 8000dc4:	6013      	str	r3, [r2, #0]
		 }
		 RightRear_EncoderCounter = __HAL_TIM_GET_COUNTER(&htim5);
 8000dc6:	4b4a      	ldr	r3, [pc, #296]	; (8000ef0 <main+0x308>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dcc:	4a5b      	ldr	r2, [pc, #364]	; (8000f3c <main+0x354>)
 8000dce:	6013      	str	r3, [r2, #0]
		 if(RightRear_EncoderCounter>30000)
 8000dd0:	4b5a      	ldr	r3, [pc, #360]	; (8000f3c <main+0x354>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f247 5230 	movw	r2, #30000	; 0x7530
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d906      	bls.n	8000dea <main+0x202>
		 {
			 RightRear_EncoderCounter = 65000 - RightRear_EncoderCounter;
 8000ddc:	4b57      	ldr	r3, [pc, #348]	; (8000f3c <main+0x354>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f5c3 437d 	rsb	r3, r3, #64768	; 0xfd00
 8000de4:	33e8      	adds	r3, #232	; 0xe8
 8000de6:	4a55      	ldr	r2, [pc, #340]	; (8000f3c <main+0x354>)
 8000de8:	6013      	str	r3, [r2, #0]
		 }

		TIM2->CNT = 0;
 8000dea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dee:	2200      	movs	r2, #0
 8000df0:	625a      	str	r2, [r3, #36]	; 0x24
		TIM3->CNT = 0;
 8000df2:	4b53      	ldr	r3, [pc, #332]	; (8000f40 <main+0x358>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	625a      	str	r2, [r3, #36]	; 0x24
		TIM4->CNT = 0;
 8000df8:	4b52      	ldr	r3, [pc, #328]	; (8000f44 <main+0x35c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	625a      	str	r2, [r3, #36]	; 0x24
		TIM5->CNT = 0;
 8000dfe:	4b52      	ldr	r3, [pc, #328]	; (8000f48 <main+0x360>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	625a      	str	r2, [r3, #36]	; 0x24
//			 L_Front_WHL.signalPWM = 1900;
//		 if(L_Front_WHL.signalPWM < 1000)
//			 L_Front_WHL.signalPWM = 1100;

		 //------------------------------------------- 2 ---------------------------------------//
		 R_Front_WHL.encoderCount = RightFront_EncoderCounter;
 8000e04:	4b4c      	ldr	r3, [pc, #304]	; (8000f38 <main+0x350>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a45      	ldr	r2, [pc, #276]	; (8000f20 <main+0x338>)
 8000e0a:	6013      	str	r3, [r2, #0]
		 //RightFront_EncoderCounter = 0; // clear the counter

		 //R_Front_WHL.rotationEncoder = ((float)R_Front_WHL.encoderCount*100.0)/(4096.0);
		 R_Front_WHL.rotationWheel = ((float)R_Front_WHL.encoderCount)/(4096.0); // not necessary, just for control
 8000e0c:	4b44      	ldr	r3, [pc, #272]	; (8000f20 <main+0x338>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	ee07 3a90 	vmov	s15, r3
 8000e14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e18:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8000f4c <main+0x364>
 8000e1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e20:	4b3f      	ldr	r3, [pc, #252]	; (8000f20 <main+0x338>)
 8000e22:	edc3 7a01 	vstr	s15, [r3, #4]

		 // check the math
		 R_Front_WHL.wheelRPM = (R_Front_WHL.rotationWheel)*600.0;
 8000e26:	4b3e      	ldr	r3, [pc, #248]	; (8000f20 <main+0x338>)
 8000e28:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e2c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8000f50 <main+0x368>
 8000e30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e34:	4b3a      	ldr	r3, [pc, #232]	; (8000f20 <main+0x338>)
 8000e36:	edc3 7a03 	vstr	s15, [r3, #12]
		 R_Front_WHL.wheelRadDivSec = (R_Front_WHL.wheelRPM)*RPMtoRadDivSec;
 8000e3a:	4b39      	ldr	r3, [pc, #228]	; (8000f20 <main+0x338>)
 8000e3c:	68db      	ldr	r3, [r3, #12]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fc58 	bl	80006f4 <__aeabi_f2d>
 8000e44:	a324      	add	r3, pc, #144	; (adr r3, 8000ed8 <main+0x2f0>)
 8000e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e4a:	f7ff f9c5 	bl	80001d8 <__aeabi_dmul>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	460b      	mov	r3, r1
 8000e52:	4610      	mov	r0, r2
 8000e54:	4619      	mov	r1, r3
 8000e56:	f7ff fccd 	bl	80007f4 <__aeabi_d2f>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	4a30      	ldr	r2, [pc, #192]	; (8000f20 <main+0x338>)
 8000e5e:	6113      	str	r3, [r2, #16]

		 R_Front_WHL.errorPI = (fabs(speedRightWHL)) - R_Front_WHL.wheelRadDivSec;
 8000e60:	4b32      	ldr	r3, [pc, #200]	; (8000f2c <main+0x344>)
 8000e62:	edd3 7a00 	vldr	s15, [r3]
 8000e66:	eeb0 7ae7 	vabs.f32	s14, s15
 8000e6a:	4b2d      	ldr	r3, [pc, #180]	; (8000f20 <main+0x338>)
 8000e6c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000e70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e74:	4b2a      	ldr	r3, [pc, #168]	; (8000f20 <main+0x338>)
 8000e76:	edc3 7a05 	vstr	s15, [r3, #20]
		 R_Front_WHL.integralPI += R_Front_WHL.errorPI;
 8000e7a:	4b29      	ldr	r3, [pc, #164]	; (8000f20 <main+0x338>)
 8000e7c:	ed93 7a06 	vldr	s14, [r3, #24]
 8000e80:	4b27      	ldr	r3, [pc, #156]	; (8000f20 <main+0x338>)
 8000e82:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e8a:	4b25      	ldr	r3, [pc, #148]	; (8000f20 <main+0x338>)
 8000e8c:	edc3 7a06 	vstr	s15, [r3, #24]
//
//		 R_Front_WHL.integralPI += R_Front_WHL.errorPI;


		 //pwmSignal = Kp*error + Ki*integral;
		 if(speedRightWHL > 0)
 8000e90:	4b26      	ldr	r3, [pc, #152]	; (8000f2c <main+0x344>)
 8000e92:	edd3 7a00 	vldr	s15, [r3]
 8000e96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e9e:	f340 8086 	ble.w	8000fae <main+0x3c6>
			 R_Front_WHL.signalPWM = 1525 + round((240.0/8.94)*fabs(KP*R_Front_WHL.errorPI + KI*R_Front_WHL.integralPI) + 23.6241);
 8000ea2:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <main+0x338>)
 8000ea4:	ed93 7a05 	vldr	s14, [r3, #20]
 8000ea8:	4b2a      	ldr	r3, [pc, #168]	; (8000f54 <main+0x36c>)
 8000eaa:	edd3 7a00 	vldr	s15, [r3]
 8000eae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000eb2:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <main+0x338>)
 8000eb4:	edd3 6a06 	vldr	s13, [r3, #24]
 8000eb8:	4b27      	ldr	r3, [pc, #156]	; (8000f58 <main+0x370>)
 8000eba:	edd3 7a00 	vldr	s15, [r3]
 8000ebe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ec6:	eef0 7ae7 	vabs.f32	s15, s15
 8000eca:	ee17 0a90 	vmov	r0, s15
 8000ece:	f7ff fc11 	bl	80006f4 <__aeabi_f2d>
 8000ed2:	e043      	b.n	8000f5c <main+0x374>
 8000ed4:	f3af 8000 	nop.w
 8000ed8:	0f3cb3e5 	.word	0x0f3cb3e5
 8000edc:	3fbaceee 	.word	0x3fbaceee
 8000ee0:	20000074 	.word	0x20000074
 8000ee4:	200000bc 	.word	0x200000bc
 8000ee8:	20000104 	.word	0x20000104
 8000eec:	2000014c 	.word	0x2000014c
 8000ef0:	20000194 	.word	0x20000194
 8000ef4:	200001dc 	.word	0x200001dc
 8000ef8:	2000031c 	.word	0x2000031c
 8000efc:	20000224 	.word	0x20000224
 8000f00:	20000324 	.word	0x20000324
 8000f04:	20000328 	.word	0x20000328
 8000f08:	2000032c 	.word	0x2000032c
 8000f0c:	49742400 	.word	0x49742400
 8000f10:	20000330 	.word	0x20000330
 8000f14:	20000334 	.word	0x20000334
 8000f18:	2000002c 	.word	0x2000002c
 8000f1c:	40010000 	.word	0x40010000
 8000f20:	2000000c 	.word	0x2000000c
 8000f24:	20000000 	.word	0x20000000
 8000f28:	20000338 	.word	0x20000338
 8000f2c:	2000033c 	.word	0x2000033c
 8000f30:	2000030c 	.word	0x2000030c
 8000f34:	20000314 	.word	0x20000314
 8000f38:	20000310 	.word	0x20000310
 8000f3c:	20000318 	.word	0x20000318
 8000f40:	40000400 	.word	0x40000400
 8000f44:	40000800 	.word	0x40000800
 8000f48:	40000c00 	.word	0x40000c00
 8000f4c:	45800000 	.word	0x45800000
 8000f50:	44160000 	.word	0x44160000
 8000f54:	20000008 	.word	0x20000008
 8000f58:	20000004 	.word	0x20000004
 8000f5c:	a3cc      	add	r3, pc, #816	; (adr r3, 8001290 <main+0x6a8>)
 8000f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f62:	f7ff f939 	bl	80001d8 <__aeabi_dmul>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	a3ca      	add	r3, pc, #808	; (adr r3, 8001298 <main+0x6b0>)
 8000f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f74:	f7ff fa60 	bl	8000438 <__adddf3>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	ec43 2b17 	vmov	d7, r2, r3
 8000f80:	eeb0 0a47 	vmov.f32	s0, s14
 8000f84:	eef0 0a67 	vmov.f32	s1, s15
 8000f88:	f004 f9e2 	bl	8005350 <round>
 8000f8c:	ec51 0b10 	vmov	r0, r1, d0
 8000f90:	a3c3      	add	r3, pc, #780	; (adr r3, 80012a0 <main+0x6b8>)
 8000f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f96:	f7ff fa4f 	bl	8000438 <__adddf3>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f7ff fbff 	bl	80007a4 <__aeabi_d2iz>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	4ac1      	ldr	r2, [pc, #772]	; (80012b0 <main+0x6c8>)
 8000faa:	61d3      	str	r3, [r2, #28]
 8000fac:	e050      	b.n	8001050 <main+0x468>
		 else if(speedRightWHL == 0){		// ??? check this condition
 8000fae:	4bc1      	ldr	r3, [pc, #772]	; (80012b4 <main+0x6cc>)
 8000fb0:	edd3 7a00 	vldr	s15, [r3]
 8000fb4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fbc:	d108      	bne.n	8000fd0 <main+0x3e8>
			 R_Front_WHL.signalPWM = 1525;
 8000fbe:	4bbc      	ldr	r3, [pc, #752]	; (80012b0 <main+0x6c8>)
 8000fc0:	f240 52f5 	movw	r2, #1525	; 0x5f5
 8000fc4:	61da      	str	r2, [r3, #28]
		 	 R_Front_WHL.integralPI = 0;
 8000fc6:	4bba      	ldr	r3, [pc, #744]	; (80012b0 <main+0x6c8>)
 8000fc8:	f04f 0200 	mov.w	r2, #0
 8000fcc:	619a      	str	r2, [r3, #24]
 8000fce:	e03f      	b.n	8001050 <main+0x468>
		 }
		 else
			 R_Front_WHL.signalPWM = 1525 - round((240.0/8.94)*fabs(KP*R_Front_WHL.errorPI + KI*R_Front_WHL.integralPI) + 23.6241);
 8000fd0:	4bb7      	ldr	r3, [pc, #732]	; (80012b0 <main+0x6c8>)
 8000fd2:	ed93 7a05 	vldr	s14, [r3, #20]
 8000fd6:	4bb8      	ldr	r3, [pc, #736]	; (80012b8 <main+0x6d0>)
 8000fd8:	edd3 7a00 	vldr	s15, [r3]
 8000fdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fe0:	4bb3      	ldr	r3, [pc, #716]	; (80012b0 <main+0x6c8>)
 8000fe2:	edd3 6a06 	vldr	s13, [r3, #24]
 8000fe6:	4bb5      	ldr	r3, [pc, #724]	; (80012bc <main+0x6d4>)
 8000fe8:	edd3 7a00 	vldr	s15, [r3]
 8000fec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ff0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff4:	eef0 7ae7 	vabs.f32	s15, s15
 8000ff8:	ee17 0a90 	vmov	r0, s15
 8000ffc:	f7ff fb7a 	bl	80006f4 <__aeabi_f2d>
 8001000:	a3a3      	add	r3, pc, #652	; (adr r3, 8001290 <main+0x6a8>)
 8001002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001006:	f7ff f8e7 	bl	80001d8 <__aeabi_dmul>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4610      	mov	r0, r2
 8001010:	4619      	mov	r1, r3
 8001012:	a3a1      	add	r3, pc, #644	; (adr r3, 8001298 <main+0x6b0>)
 8001014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001018:	f7ff fa0e 	bl	8000438 <__adddf3>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	ec43 2b17 	vmov	d7, r2, r3
 8001024:	eeb0 0a47 	vmov.f32	s0, s14
 8001028:	eef0 0a67 	vmov.f32	s1, s15
 800102c:	f004 f990 	bl	8005350 <round>
 8001030:	ec53 2b10 	vmov	r2, r3, d0
 8001034:	a19a      	add	r1, pc, #616	; (adr r1, 80012a0 <main+0x6b8>)
 8001036:	e9d1 0100 	ldrd	r0, r1, [r1]
 800103a:	f7ff f9fb 	bl	8000434 <__aeabi_dsub>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4610      	mov	r0, r2
 8001044:	4619      	mov	r1, r3
 8001046:	f7ff fbad 	bl	80007a4 <__aeabi_d2iz>
 800104a:	4603      	mov	r3, r0
 800104c:	4a98      	ldr	r2, [pc, #608]	; (80012b0 <main+0x6c8>)
 800104e:	61d3      	str	r3, [r2, #28]

		 if(R_Front_WHL.signalPWM > 2000)
 8001050:	4b97      	ldr	r3, [pc, #604]	; (80012b0 <main+0x6c8>)
 8001052:	69db      	ldr	r3, [r3, #28]
 8001054:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001058:	dd03      	ble.n	8001062 <main+0x47a>
			 R_Front_WHL.signalPWM = 1900;
 800105a:	4b95      	ldr	r3, [pc, #596]	; (80012b0 <main+0x6c8>)
 800105c:	f240 726c 	movw	r2, #1900	; 0x76c
 8001060:	61da      	str	r2, [r3, #28]
		 if(R_Front_WHL.signalPWM < 1000)
 8001062:	4b93      	ldr	r3, [pc, #588]	; (80012b0 <main+0x6c8>)
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800106a:	da03      	bge.n	8001074 <main+0x48c>
			 R_Front_WHL.signalPWM = 1100;
 800106c:	4b90      	ldr	r3, [pc, #576]	; (80012b0 <main+0x6c8>)
 800106e:	f240 424c 	movw	r2, #1100	; 0x44c
 8001072:	61da      	str	r2, [r3, #28]
//		 if(L_Rear_WHL.signalPWM > 2000)
//			 L_Rear_WHL.signalPWM = 1900;
//		 if(L_Rear_WHL.signalPWM < 1000)
//			 L_Rear_WHL.signalPWM = 1100;
		 //------------------------------------------- 4 ---------------------------------------//
		 R_Rear_WHL.encoderCount = RightRear_EncoderCounter;
 8001074:	4b92      	ldr	r3, [pc, #584]	; (80012c0 <main+0x6d8>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a92      	ldr	r2, [pc, #584]	; (80012c4 <main+0x6dc>)
 800107a:	6013      	str	r3, [r2, #0]
		 //RightRear_EncoderCounter = 0; // clear the counter

		 //R_Rear_WHL.rotationEncoder = ((float)R_Rear_WHL.encoderCount*100.0)/(4096.0); // not necessary, just for control
		 R_Rear_WHL.rotationWheel = ((float)R_Rear_WHL.encoderCount)/(4096.0);
 800107c:	4b91      	ldr	r3, [pc, #580]	; (80012c4 <main+0x6dc>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	ee07 3a90 	vmov	s15, r3
 8001084:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001088:	eddf 6a8f 	vldr	s13, [pc, #572]	; 80012c8 <main+0x6e0>
 800108c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001090:	4b8c      	ldr	r3, [pc, #560]	; (80012c4 <main+0x6dc>)
 8001092:	edc3 7a01 	vstr	s15, [r3, #4]

		 // check the math
		 R_Rear_WHL.wheelRPM = (R_Rear_WHL.rotationWheel)*600.0;
 8001096:	4b8b      	ldr	r3, [pc, #556]	; (80012c4 <main+0x6dc>)
 8001098:	edd3 7a01 	vldr	s15, [r3, #4]
 800109c:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 80012cc <main+0x6e4>
 80010a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010a4:	4b87      	ldr	r3, [pc, #540]	; (80012c4 <main+0x6dc>)
 80010a6:	edc3 7a03 	vstr	s15, [r3, #12]
		 R_Rear_WHL.wheelRadDivSec = (R_Rear_WHL.wheelRPM)*RPMtoRadDivSec;
 80010aa:	4b86      	ldr	r3, [pc, #536]	; (80012c4 <main+0x6dc>)
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fb20 	bl	80006f4 <__aeabi_f2d>
 80010b4:	a37c      	add	r3, pc, #496	; (adr r3, 80012a8 <main+0x6c0>)
 80010b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ba:	f7ff f88d 	bl	80001d8 <__aeabi_dmul>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4610      	mov	r0, r2
 80010c4:	4619      	mov	r1, r3
 80010c6:	f7ff fb95 	bl	80007f4 <__aeabi_d2f>
 80010ca:	4603      	mov	r3, r0
 80010cc:	4a7d      	ldr	r2, [pc, #500]	; (80012c4 <main+0x6dc>)
 80010ce:	6113      	str	r3, [r2, #16]

 		 R_Rear_WHL.errorPI = (fabs(speedRightWHL)) - R_Rear_WHL.wheelRadDivSec;
 80010d0:	4b78      	ldr	r3, [pc, #480]	; (80012b4 <main+0x6cc>)
 80010d2:	edd3 7a00 	vldr	s15, [r3]
 80010d6:	eeb0 7ae7 	vabs.f32	s14, s15
 80010da:	4b7a      	ldr	r3, [pc, #488]	; (80012c4 <main+0x6dc>)
 80010dc:	edd3 7a04 	vldr	s15, [r3, #16]
 80010e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010e4:	4b77      	ldr	r3, [pc, #476]	; (80012c4 <main+0x6dc>)
 80010e6:	edc3 7a05 	vstr	s15, [r3, #20]
 		 R_Rear_WHL.integralPI += R_Rear_WHL.errorPI;
 80010ea:	4b76      	ldr	r3, [pc, #472]	; (80012c4 <main+0x6dc>)
 80010ec:	ed93 7a06 	vldr	s14, [r3, #24]
 80010f0:	4b74      	ldr	r3, [pc, #464]	; (80012c4 <main+0x6dc>)
 80010f2:	edd3 7a05 	vldr	s15, [r3, #20]
 80010f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010fa:	4b72      	ldr	r3, [pc, #456]	; (80012c4 <main+0x6dc>)
 80010fc:	edc3 7a06 	vstr	s15, [r3, #24]
//		 R_Rear_WHL.integralPI += R_Rear_WHL.errorPI;

		 //variableREAR = (KP*R_Rear_WHL.errorPI + KI*R_Rear_WHL.integralPI);

		 //pwmSignal = Kp*error + Ki*integral;
		 if(speedRightWHL > 0)
 8001100:	4b6c      	ldr	r3, [pc, #432]	; (80012b4 <main+0x6cc>)
 8001102:	edd3 7a00 	vldr	s15, [r3]
 8001106:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800110a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800110e:	dd40      	ble.n	8001192 <main+0x5aa>
			 R_Rear_WHL.signalPWM = 1525 + round((240.0/8.94)*fabs(KP*R_Rear_WHL.errorPI + KI*R_Rear_WHL.integralPI) + 23.6241);
 8001110:	4b6c      	ldr	r3, [pc, #432]	; (80012c4 <main+0x6dc>)
 8001112:	ed93 7a05 	vldr	s14, [r3, #20]
 8001116:	4b68      	ldr	r3, [pc, #416]	; (80012b8 <main+0x6d0>)
 8001118:	edd3 7a00 	vldr	s15, [r3]
 800111c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001120:	4b68      	ldr	r3, [pc, #416]	; (80012c4 <main+0x6dc>)
 8001122:	edd3 6a06 	vldr	s13, [r3, #24]
 8001126:	4b65      	ldr	r3, [pc, #404]	; (80012bc <main+0x6d4>)
 8001128:	edd3 7a00 	vldr	s15, [r3]
 800112c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001134:	eef0 7ae7 	vabs.f32	s15, s15
 8001138:	ee17 0a90 	vmov	r0, s15
 800113c:	f7ff fada 	bl	80006f4 <__aeabi_f2d>
 8001140:	a353      	add	r3, pc, #332	; (adr r3, 8001290 <main+0x6a8>)
 8001142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001146:	f7ff f847 	bl	80001d8 <__aeabi_dmul>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4610      	mov	r0, r2
 8001150:	4619      	mov	r1, r3
 8001152:	a351      	add	r3, pc, #324	; (adr r3, 8001298 <main+0x6b0>)
 8001154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001158:	f7ff f96e 	bl	8000438 <__adddf3>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	ec43 2b17 	vmov	d7, r2, r3
 8001164:	eeb0 0a47 	vmov.f32	s0, s14
 8001168:	eef0 0a67 	vmov.f32	s1, s15
 800116c:	f004 f8f0 	bl	8005350 <round>
 8001170:	ec51 0b10 	vmov	r0, r1, d0
 8001174:	a34a      	add	r3, pc, #296	; (adr r3, 80012a0 <main+0x6b8>)
 8001176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117a:	f7ff f95d 	bl	8000438 <__adddf3>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4610      	mov	r0, r2
 8001184:	4619      	mov	r1, r3
 8001186:	f7ff fb0d 	bl	80007a4 <__aeabi_d2iz>
 800118a:	4603      	mov	r3, r0
 800118c:	4a4d      	ldr	r2, [pc, #308]	; (80012c4 <main+0x6dc>)
 800118e:	61d3      	str	r3, [r2, #28]
 8001190:	e050      	b.n	8001234 <main+0x64c>
			 //R_Rear_WHL.signalPWM = 1525 + abs(KP*R_Rear_WHL.errorPI + KI*R_Rear_WHL.integralPI);
		 else if(speedRightWHL == 0){		// ??? check this condition
 8001192:	4b48      	ldr	r3, [pc, #288]	; (80012b4 <main+0x6cc>)
 8001194:	edd3 7a00 	vldr	s15, [r3]
 8001198:	eef5 7a40 	vcmp.f32	s15, #0.0
 800119c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a0:	d108      	bne.n	80011b4 <main+0x5cc>
			 R_Rear_WHL.signalPWM = 1525;
 80011a2:	4b48      	ldr	r3, [pc, #288]	; (80012c4 <main+0x6dc>)
 80011a4:	f240 52f5 	movw	r2, #1525	; 0x5f5
 80011a8:	61da      	str	r2, [r3, #28]
			 R_Rear_WHL.integralPI = 0;
 80011aa:	4b46      	ldr	r3, [pc, #280]	; (80012c4 <main+0x6dc>)
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	619a      	str	r2, [r3, #24]
 80011b2:	e03f      	b.n	8001234 <main+0x64c>
		 }
		 else
			 R_Rear_WHL.signalPWM = 1525 - round((240.0/8.94)*fabs(KP*R_Rear_WHL.errorPI + KI*R_Rear_WHL.integralPI) + 23.6241);;
 80011b4:	4b43      	ldr	r3, [pc, #268]	; (80012c4 <main+0x6dc>)
 80011b6:	ed93 7a05 	vldr	s14, [r3, #20]
 80011ba:	4b3f      	ldr	r3, [pc, #252]	; (80012b8 <main+0x6d0>)
 80011bc:	edd3 7a00 	vldr	s15, [r3]
 80011c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011c4:	4b3f      	ldr	r3, [pc, #252]	; (80012c4 <main+0x6dc>)
 80011c6:	edd3 6a06 	vldr	s13, [r3, #24]
 80011ca:	4b3c      	ldr	r3, [pc, #240]	; (80012bc <main+0x6d4>)
 80011cc:	edd3 7a00 	vldr	s15, [r3]
 80011d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d8:	eef0 7ae7 	vabs.f32	s15, s15
 80011dc:	ee17 0a90 	vmov	r0, s15
 80011e0:	f7ff fa88 	bl	80006f4 <__aeabi_f2d>
 80011e4:	a32a      	add	r3, pc, #168	; (adr r3, 8001290 <main+0x6a8>)
 80011e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ea:	f7fe fff5 	bl	80001d8 <__aeabi_dmul>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4610      	mov	r0, r2
 80011f4:	4619      	mov	r1, r3
 80011f6:	a328      	add	r3, pc, #160	; (adr r3, 8001298 <main+0x6b0>)
 80011f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fc:	f7ff f91c 	bl	8000438 <__adddf3>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	ec43 2b17 	vmov	d7, r2, r3
 8001208:	eeb0 0a47 	vmov.f32	s0, s14
 800120c:	eef0 0a67 	vmov.f32	s1, s15
 8001210:	f004 f89e 	bl	8005350 <round>
 8001214:	ec53 2b10 	vmov	r2, r3, d0
 8001218:	a121      	add	r1, pc, #132	; (adr r1, 80012a0 <main+0x6b8>)
 800121a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800121e:	f7ff f909 	bl	8000434 <__aeabi_dsub>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4610      	mov	r0, r2
 8001228:	4619      	mov	r1, r3
 800122a:	f7ff fabb 	bl	80007a4 <__aeabi_d2iz>
 800122e:	4603      	mov	r3, r0
 8001230:	4a24      	ldr	r2, [pc, #144]	; (80012c4 <main+0x6dc>)
 8001232:	61d3      	str	r3, [r2, #28]

		 if(R_Rear_WHL.signalPWM > 2000)
 8001234:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <main+0x6dc>)
 8001236:	69db      	ldr	r3, [r3, #28]
 8001238:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800123c:	dd03      	ble.n	8001246 <main+0x65e>
			 R_Rear_WHL.signalPWM = 1900;
 800123e:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <main+0x6dc>)
 8001240:	f240 726c 	movw	r2, #1900	; 0x76c
 8001244:	61da      	str	r2, [r3, #28]
		 if(R_Rear_WHL.signalPWM < 1000)
 8001246:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <main+0x6dc>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800124e:	da03      	bge.n	8001258 <main+0x670>
			 R_Rear_WHL.signalPWM = 1100;
 8001250:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <main+0x6dc>)
 8001252:	f240 424c 	movw	r2, #1100	; 0x44c
 8001256:	61da      	str	r2, [r3, #28]

		 velocityCalculationFlag = false;
 8001258:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <main+0x6e8>)
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]

		 variableFRONT = speedRightWHL - R_Front_WHL.wheelRadDivSec;
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <main+0x6cc>)
 8001260:	ed93 7a00 	vldr	s14, [r3]
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <main+0x6c8>)
 8001266:	edd3 7a04 	vldr	s15, [r3, #16]
 800126a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800126e:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <main+0x6ec>)
 8001270:	edc3 7a00 	vstr	s15, [r3]
		 variableREAR = speedRightWHL - R_Rear_WHL.wheelRadDivSec;
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <main+0x6cc>)
 8001276:	ed93 7a00 	vldr	s14, [r3]
 800127a:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <main+0x6dc>)
 800127c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001280:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001284:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <main+0x6f0>)
 8001286:	edc3 7a00 	vstr	s15, [r3]
      if (rxfull == 1){
 800128a:	e502      	b.n	8000c92 <main+0xaa>
 800128c:	f3af 8000 	nop.w
 8001290:	b4671656 	.word	0xb4671656
 8001294:	403ad87b 	.word	0x403ad87b
 8001298:	04816f00 	.word	0x04816f00
 800129c:	40379fc5 	.word	0x40379fc5
 80012a0:	00000000 	.word	0x00000000
 80012a4:	4097d400 	.word	0x4097d400
 80012a8:	0f3cb3e5 	.word	0x0f3cb3e5
 80012ac:	3fbaceee 	.word	0x3fbaceee
 80012b0:	2000000c 	.word	0x2000000c
 80012b4:	2000033c 	.word	0x2000033c
 80012b8:	20000008 	.word	0x20000008
 80012bc:	20000004 	.word	0x20000004
 80012c0:	20000318 	.word	0x20000318
 80012c4:	2000002c 	.word	0x2000002c
 80012c8:	45800000 	.word	0x45800000
 80012cc:	44160000 	.word	0x44160000
 80012d0:	20000000 	.word	0x20000000
 80012d4:	20000340 	.word	0x20000340
 80012d8:	20000344 	.word	0x20000344

080012dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b094      	sub	sp, #80	; 0x50
 80012e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e2:	f107 0320 	add.w	r3, r7, #32
 80012e6:	2230      	movs	r2, #48	; 0x30
 80012e8:	2100      	movs	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f004 f828 	bl	8005340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f0:	f107 030c 	add.w	r3, r7, #12
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001300:	2300      	movs	r3, #0
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	4b28      	ldr	r3, [pc, #160]	; (80013a8 <SystemClock_Config+0xcc>)
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001308:	4a27      	ldr	r2, [pc, #156]	; (80013a8 <SystemClock_Config+0xcc>)
 800130a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800130e:	6413      	str	r3, [r2, #64]	; 0x40
 8001310:	4b25      	ldr	r3, [pc, #148]	; (80013a8 <SystemClock_Config+0xcc>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800131c:	2300      	movs	r3, #0
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	4b22      	ldr	r3, [pc, #136]	; (80013ac <SystemClock_Config+0xd0>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001328:	4a20      	ldr	r2, [pc, #128]	; (80013ac <SystemClock_Config+0xd0>)
 800132a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <SystemClock_Config+0xd0>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800133c:	2302      	movs	r3, #2
 800133e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001340:	2301      	movs	r3, #1
 8001342:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001344:	2310      	movs	r3, #16
 8001346:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001348:	2302      	movs	r3, #2
 800134a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800134c:	2300      	movs	r3, #0
 800134e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001350:	2308      	movs	r3, #8
 8001352:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001354:	2354      	movs	r3, #84	; 0x54
 8001356:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001358:	2302      	movs	r3, #2
 800135a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800135c:	2307      	movs	r3, #7
 800135e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001360:	f107 0320 	add.w	r3, r7, #32
 8001364:	4618      	mov	r0, r3
 8001366:	f001 fcbb 	bl	8002ce0 <HAL_RCC_OscConfig>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001370:	f000 fb3a 	bl	80019e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001374:	230f      	movs	r3, #15
 8001376:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001378:	2302      	movs	r3, #2
 800137a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001384:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800138a:	f107 030c 	add.w	r3, r7, #12
 800138e:	2102      	movs	r1, #2
 8001390:	4618      	mov	r0, r3
 8001392:	f001 ff1d 	bl	80031d0 <HAL_RCC_ClockConfig>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800139c:	f000 fb24 	bl	80019e8 <Error_Handler>
  }
}
 80013a0:	bf00      	nop
 80013a2:	3750      	adds	r7, #80	; 0x50
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40007000 	.word	0x40007000

080013b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b092      	sub	sp, #72	; 0x48
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
 80013d0:	615a      	str	r2, [r3, #20]
 80013d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	2220      	movs	r2, #32
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f003 ffb0 	bl	8005340 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013e0:	4b45      	ldr	r3, [pc, #276]	; (80014f8 <MX_TIM1_Init+0x148>)
 80013e2:	4a46      	ldr	r2, [pc, #280]	; (80014fc <MX_TIM1_Init+0x14c>)
 80013e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80013e6:	4b44      	ldr	r3, [pc, #272]	; (80014f8 <MX_TIM1_Init+0x148>)
 80013e8:	2253      	movs	r2, #83	; 0x53
 80013ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ec:	4b42      	ldr	r3, [pc, #264]	; (80014f8 <MX_TIM1_Init+0x148>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 80013f2:	4b41      	ldr	r3, [pc, #260]	; (80014f8 <MX_TIM1_Init+0x148>)
 80013f4:	f24f 4223 	movw	r2, #62499	; 0xf423
 80013f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fa:	4b3f      	ldr	r3, [pc, #252]	; (80014f8 <MX_TIM1_Init+0x148>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001400:	4b3d      	ldr	r3, [pc, #244]	; (80014f8 <MX_TIM1_Init+0x148>)
 8001402:	2200      	movs	r2, #0
 8001404:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001406:	4b3c      	ldr	r3, [pc, #240]	; (80014f8 <MX_TIM1_Init+0x148>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800140c:	483a      	ldr	r0, [pc, #232]	; (80014f8 <MX_TIM1_Init+0x148>)
 800140e:	f002 f9b1 	bl	8003774 <HAL_TIM_PWM_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001418:	f000 fae6 	bl	80019e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800141c:	2300      	movs	r3, #0
 800141e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001420:	2300      	movs	r3, #0
 8001422:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001424:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001428:	4619      	mov	r1, r3
 800142a:	4833      	ldr	r0, [pc, #204]	; (80014f8 <MX_TIM1_Init+0x148>)
 800142c:	f003 f95c 	bl	80046e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001436:	f000 fad7 	bl	80019e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800143a:	2360      	movs	r3, #96	; 0x60
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001442:	2300      	movs	r3, #0
 8001444:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001446:	2300      	movs	r3, #0
 8001448:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800144e:	2300      	movs	r3, #0
 8001450:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001452:	2300      	movs	r3, #0
 8001454:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145a:	2200      	movs	r2, #0
 800145c:	4619      	mov	r1, r3
 800145e:	4826      	ldr	r0, [pc, #152]	; (80014f8 <MX_TIM1_Init+0x148>)
 8001460:	f002 fcc4 	bl	8003dec <HAL_TIM_PWM_ConfigChannel>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800146a:	f000 fabd 	bl	80019e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800146e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001472:	2204      	movs	r2, #4
 8001474:	4619      	mov	r1, r3
 8001476:	4820      	ldr	r0, [pc, #128]	; (80014f8 <MX_TIM1_Init+0x148>)
 8001478:	f002 fcb8 	bl	8003dec <HAL_TIM_PWM_ConfigChannel>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001482:	f000 fab1 	bl	80019e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148a:	2208      	movs	r2, #8
 800148c:	4619      	mov	r1, r3
 800148e:	481a      	ldr	r0, [pc, #104]	; (80014f8 <MX_TIM1_Init+0x148>)
 8001490:	f002 fcac 	bl	8003dec <HAL_TIM_PWM_ConfigChannel>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800149a:	f000 faa5 	bl	80019e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800149e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a2:	220c      	movs	r2, #12
 80014a4:	4619      	mov	r1, r3
 80014a6:	4814      	ldr	r0, [pc, #80]	; (80014f8 <MX_TIM1_Init+0x148>)
 80014a8:	f002 fca0 	bl	8003dec <HAL_TIM_PWM_ConfigChannel>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80014b2:	f000 fa99 	bl	80019e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	4619      	mov	r1, r3
 80014d8:	4807      	ldr	r0, [pc, #28]	; (80014f8 <MX_TIM1_Init+0x148>)
 80014da:	f003 f973 	bl	80047c4 <HAL_TIMEx_ConfigBreakDeadTime>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80014e4:	f000 fa80 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014e8:	4803      	ldr	r0, [pc, #12]	; (80014f8 <MX_TIM1_Init+0x148>)
 80014ea:	f000 fbfd 	bl	8001ce8 <HAL_TIM_MspPostInit>

}
 80014ee:	bf00      	nop
 80014f0:	3748      	adds	r7, #72	; 0x48
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000074 	.word	0x20000074
 80014fc:	40010000 	.word	0x40010000

08001500 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08c      	sub	sp, #48	; 0x30
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001506:	f107 030c 	add.w	r3, r7, #12
 800150a:	2224      	movs	r2, #36	; 0x24
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f003 ff16 	bl	8005340 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800151c:	4b21      	ldr	r3, [pc, #132]	; (80015a4 <MX_TIM2_Init+0xa4>)
 800151e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001522:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 101-1;
 8001524:	4b1f      	ldr	r3, [pc, #124]	; (80015a4 <MX_TIM2_Init+0xa4>)
 8001526:	2264      	movs	r2, #100	; 0x64
 8001528:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152a:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <MX_TIM2_Init+0xa4>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65000-1;
 8001530:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <MX_TIM2_Init+0xa4>)
 8001532:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8001536:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001538:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <MX_TIM2_Init+0xa4>)
 800153a:	2200      	movs	r2, #0
 800153c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <MX_TIM2_Init+0xa4>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001544:	2303      	movs	r3, #3
 8001546:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001548:	2300      	movs	r3, #0
 800154a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800154c:	2301      	movs	r3, #1
 800154e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001550:	2300      	movs	r3, #0
 8001552:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001554:	230a      	movs	r3, #10
 8001556:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001558:	2300      	movs	r3, #0
 800155a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800155c:	2301      	movs	r3, #1
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001564:	230a      	movs	r3, #10
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	4619      	mov	r1, r3
 800156e:	480d      	ldr	r0, [pc, #52]	; (80015a4 <MX_TIM2_Init+0xa4>)
 8001570:	f002 fa00 	bl	8003974 <HAL_TIM_Encoder_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800157a:	f000 fa35 	bl	80019e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	4619      	mov	r1, r3
 800158a:	4806      	ldr	r0, [pc, #24]	; (80015a4 <MX_TIM2_Init+0xa4>)
 800158c:	f003 f8ac 	bl	80046e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001596:	f000 fa27 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	3730      	adds	r7, #48	; 0x30
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	200000bc 	.word	0x200000bc

080015a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08c      	sub	sp, #48	; 0x30
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015ae:	f107 030c 	add.w	r3, r7, #12
 80015b2:	2224      	movs	r2, #36	; 0x24
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f003 fec2 	bl	8005340 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015c4:	4b20      	ldr	r3, [pc, #128]	; (8001648 <MX_TIM3_Init+0xa0>)
 80015c6:	4a21      	ldr	r2, [pc, #132]	; (800164c <MX_TIM3_Init+0xa4>)
 80015c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 101-1;
 80015ca:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <MX_TIM3_Init+0xa0>)
 80015cc:	2264      	movs	r2, #100	; 0x64
 80015ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d0:	4b1d      	ldr	r3, [pc, #116]	; (8001648 <MX_TIM3_Init+0xa0>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65000-1;
 80015d6:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <MX_TIM3_Init+0xa0>)
 80015d8:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 80015dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015de:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <MX_TIM3_Init+0xa0>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e4:	4b18      	ldr	r3, [pc, #96]	; (8001648 <MX_TIM3_Init+0xa0>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015ea:	2303      	movs	r3, #3
 80015ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015f2:	2301      	movs	r3, #1
 80015f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80015fa:	230a      	movs	r3, #10
 80015fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015fe:	2300      	movs	r3, #0
 8001600:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001602:	2301      	movs	r3, #1
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001606:	2300      	movs	r3, #0
 8001608:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800160a:	230a      	movs	r3, #10
 800160c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800160e:	f107 030c 	add.w	r3, r7, #12
 8001612:	4619      	mov	r1, r3
 8001614:	480c      	ldr	r0, [pc, #48]	; (8001648 <MX_TIM3_Init+0xa0>)
 8001616:	f002 f9ad 	bl	8003974 <HAL_TIM_Encoder_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001620:	f000 f9e2 	bl	80019e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001624:	2300      	movs	r3, #0
 8001626:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	4619      	mov	r1, r3
 8001630:	4805      	ldr	r0, [pc, #20]	; (8001648 <MX_TIM3_Init+0xa0>)
 8001632:	f003 f859 	bl	80046e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800163c:	f000 f9d4 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001640:	bf00      	nop
 8001642:	3730      	adds	r7, #48	; 0x30
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000104 	.word	0x20000104
 800164c:	40000400 	.word	0x40000400

08001650 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08c      	sub	sp, #48	; 0x30
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001656:	f107 030c 	add.w	r3, r7, #12
 800165a:	2224      	movs	r2, #36	; 0x24
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f003 fe6e 	bl	8005340 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800166c:	4b20      	ldr	r3, [pc, #128]	; (80016f0 <MX_TIM4_Init+0xa0>)
 800166e:	4a21      	ldr	r2, [pc, #132]	; (80016f4 <MX_TIM4_Init+0xa4>)
 8001670:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 101-1;
 8001672:	4b1f      	ldr	r3, [pc, #124]	; (80016f0 <MX_TIM4_Init+0xa0>)
 8001674:	2264      	movs	r2, #100	; 0x64
 8001676:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001678:	4b1d      	ldr	r3, [pc, #116]	; (80016f0 <MX_TIM4_Init+0xa0>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65000-1;
 800167e:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <MX_TIM4_Init+0xa0>)
 8001680:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8001684:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001686:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <MX_TIM4_Init+0xa0>)
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168c:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <MX_TIM4_Init+0xa0>)
 800168e:	2200      	movs	r2, #0
 8001690:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001692:	2303      	movs	r3, #3
 8001694:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800169a:	2301      	movs	r3, #1
 800169c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800169e:	2300      	movs	r3, #0
 80016a0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80016a2:	230a      	movs	r3, #10
 80016a4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016a6:	2300      	movs	r3, #0
 80016a8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016aa:	2301      	movs	r3, #1
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016ae:	2300      	movs	r3, #0
 80016b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80016b2:	230a      	movs	r3, #10
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80016b6:	f107 030c 	add.w	r3, r7, #12
 80016ba:	4619      	mov	r1, r3
 80016bc:	480c      	ldr	r0, [pc, #48]	; (80016f0 <MX_TIM4_Init+0xa0>)
 80016be:	f002 f959 	bl	8003974 <HAL_TIM_Encoder_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80016c8:	f000 f98e 	bl	80019e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016cc:	2300      	movs	r3, #0
 80016ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	4619      	mov	r1, r3
 80016d8:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_TIM4_Init+0xa0>)
 80016da:	f003 f805 	bl	80046e8 <HAL_TIMEx_MasterConfigSynchronization>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80016e4:	f000 f980 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	3730      	adds	r7, #48	; 0x30
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	2000014c 	.word	0x2000014c
 80016f4:	40000800 	.word	0x40000800

080016f8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08c      	sub	sp, #48	; 0x30
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016fe:	f107 030c 	add.w	r3, r7, #12
 8001702:	2224      	movs	r2, #36	; 0x24
 8001704:	2100      	movs	r1, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f003 fe1a 	bl	8005340 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001714:	4b20      	ldr	r3, [pc, #128]	; (8001798 <MX_TIM5_Init+0xa0>)
 8001716:	4a21      	ldr	r2, [pc, #132]	; (800179c <MX_TIM5_Init+0xa4>)
 8001718:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 101-1;
 800171a:	4b1f      	ldr	r3, [pc, #124]	; (8001798 <MX_TIM5_Init+0xa0>)
 800171c:	2264      	movs	r2, #100	; 0x64
 800171e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001720:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <MX_TIM5_Init+0xa0>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65000-1;
 8001726:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <MX_TIM5_Init+0xa0>)
 8001728:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 800172c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172e:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <MX_TIM5_Init+0xa0>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001734:	4b18      	ldr	r3, [pc, #96]	; (8001798 <MX_TIM5_Init+0xa0>)
 8001736:	2200      	movs	r2, #0
 8001738:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800173a:	2303      	movs	r3, #3
 800173c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001742:	2301      	movs	r3, #1
 8001744:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001746:	2300      	movs	r3, #0
 8001748:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800174a:	230a      	movs	r3, #10
 800174c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800174e:	2300      	movs	r3, #0
 8001750:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001752:	2301      	movs	r3, #1
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001756:	2300      	movs	r3, #0
 8001758:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800175a:	230a      	movs	r3, #10
 800175c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800175e:	f107 030c 	add.w	r3, r7, #12
 8001762:	4619      	mov	r1, r3
 8001764:	480c      	ldr	r0, [pc, #48]	; (8001798 <MX_TIM5_Init+0xa0>)
 8001766:	f002 f905 	bl	8003974 <HAL_TIM_Encoder_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001770:	f000 f93a 	bl	80019e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001774:	2300      	movs	r3, #0
 8001776:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001778:	2300      	movs	r3, #0
 800177a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	4619      	mov	r1, r3
 8001780:	4805      	ldr	r0, [pc, #20]	; (8001798 <MX_TIM5_Init+0xa0>)
 8001782:	f002 ffb1 	bl	80046e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 800178c:	f000 f92c 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001790:	bf00      	nop
 8001792:	3730      	adds	r7, #48	; 0x30
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000194 	.word	0x20000194
 800179c:	40000c00 	.word	0x40000c00

080017a0 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017a6:	463b      	mov	r3, r7
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80017b2:	4b16      	ldr	r3, [pc, #88]	; (800180c <MX_TIM9_Init+0x6c>)
 80017b4:	4a16      	ldr	r2, [pc, #88]	; (8001810 <MX_TIM9_Init+0x70>)
 80017b6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 2000-1;
 80017b8:	4b14      	ldr	r3, [pc, #80]	; (800180c <MX_TIM9_Init+0x6c>)
 80017ba:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80017be:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <MX_TIM9_Init+0x6c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 4200-1;
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <MX_TIM9_Init+0x6c>)
 80017c8:	f241 0267 	movw	r2, #4199	; 0x1067
 80017cc:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ce:	4b0f      	ldr	r3, [pc, #60]	; (800180c <MX_TIM9_Init+0x6c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017d4:	4b0d      	ldr	r3, [pc, #52]	; (800180c <MX_TIM9_Init+0x6c>)
 80017d6:	2280      	movs	r2, #128	; 0x80
 80017d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80017da:	480c      	ldr	r0, [pc, #48]	; (800180c <MX_TIM9_Init+0x6c>)
 80017dc:	f001 ff18 	bl	8003610 <HAL_TIM_Base_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 80017e6:	f000 f8ff 	bl	80019e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ee:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80017f0:	463b      	mov	r3, r7
 80017f2:	4619      	mov	r1, r3
 80017f4:	4805      	ldr	r0, [pc, #20]	; (800180c <MX_TIM9_Init+0x6c>)
 80017f6:	f002 fbbb 	bl	8003f70 <HAL_TIM_ConfigClockSource>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8001800:	f000 f8f2 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001804:	bf00      	nop
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	200001dc 	.word	0x200001dc
 8001810:	40014000 	.word	0x40014000

08001814 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <MX_USART2_UART_Init+0x4c>)
 800181a:	4a12      	ldr	r2, [pc, #72]	; (8001864 <MX_USART2_UART_Init+0x50>)
 800181c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <MX_USART2_UART_Init+0x4c>)
 8001820:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001824:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <MX_USART2_UART_Init+0x4c>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <MX_USART2_UART_Init+0x4c>)
 800182e:	2200      	movs	r2, #0
 8001830:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <MX_USART2_UART_Init+0x4c>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001838:	4b09      	ldr	r3, [pc, #36]	; (8001860 <MX_USART2_UART_Init+0x4c>)
 800183a:	220c      	movs	r2, #12
 800183c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800183e:	4b08      	ldr	r3, [pc, #32]	; (8001860 <MX_USART2_UART_Init+0x4c>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <MX_USART2_UART_Init+0x4c>)
 8001846:	2200      	movs	r2, #0
 8001848:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <MX_USART2_UART_Init+0x4c>)
 800184c:	f003 f820 	bl	8004890 <HAL_UART_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001856:	f000 f8c7 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000224 	.word	0x20000224
 8001864:	40004400 	.word	0x40004400

08001868 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <MX_USART6_UART_Init+0x4c>)
 800186e:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <MX_USART6_UART_Init+0x50>)
 8001870:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <MX_USART6_UART_Init+0x4c>)
 8001874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001878:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <MX_USART6_UART_Init+0x4c>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <MX_USART6_UART_Init+0x4c>)
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <MX_USART6_UART_Init+0x4c>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800188c:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <MX_USART6_UART_Init+0x4c>)
 800188e:	220c      	movs	r2, #12
 8001890:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001892:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <MX_USART6_UART_Init+0x4c>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <MX_USART6_UART_Init+0x4c>)
 800189a:	2200      	movs	r2, #0
 800189c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800189e:	4805      	ldr	r0, [pc, #20]	; (80018b4 <MX_USART6_UART_Init+0x4c>)
 80018a0:	f002 fff6 	bl	8004890 <HAL_UART_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80018aa:	f000 f89d 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000268 	.word	0x20000268
 80018b8:	40011400 	.word	0x40011400

080018bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <MX_DMA_Init+0x3c>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4a0b      	ldr	r2, [pc, #44]	; (80018f8 <MX_DMA_Init+0x3c>)
 80018cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <MX_DMA_Init+0x3c>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	2100      	movs	r1, #0
 80018e2:	2010      	movs	r0, #16
 80018e4:	f000 fcb7 	bl	8002256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80018e8:	2010      	movs	r0, #16
 80018ea:	f000 fcd0 	bl	800228e <HAL_NVIC_EnableIRQ>

}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800

080018fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	; 0x28
 8001900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
 8001910:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	4b31      	ldr	r3, [pc, #196]	; (80019dc <MX_GPIO_Init+0xe0>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a30      	ldr	r2, [pc, #192]	; (80019dc <MX_GPIO_Init+0xe0>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b2e      	ldr	r3, [pc, #184]	; (80019dc <MX_GPIO_Init+0xe0>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	4b2a      	ldr	r3, [pc, #168]	; (80019dc <MX_GPIO_Init+0xe0>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	4a29      	ldr	r2, [pc, #164]	; (80019dc <MX_GPIO_Init+0xe0>)
 8001938:	f043 0302 	orr.w	r3, r3, #2
 800193c:	6313      	str	r3, [r2, #48]	; 0x30
 800193e:	4b27      	ldr	r3, [pc, #156]	; (80019dc <MX_GPIO_Init+0xe0>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	4b23      	ldr	r3, [pc, #140]	; (80019dc <MX_GPIO_Init+0xe0>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a22      	ldr	r2, [pc, #136]	; (80019dc <MX_GPIO_Init+0xe0>)
 8001954:	f043 0304 	orr.w	r3, r3, #4
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b20      	ldr	r3, [pc, #128]	; (80019dc <MX_GPIO_Init+0xe0>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	4b1c      	ldr	r3, [pc, #112]	; (80019dc <MX_GPIO_Init+0xe0>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a1b      	ldr	r2, [pc, #108]	; (80019dc <MX_GPIO_Init+0xe0>)
 8001970:	f043 0308 	orr.w	r3, r3, #8
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b19      	ldr	r3, [pc, #100]	; (80019dc <MX_GPIO_Init+0xe0>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0308 	and.w	r3, r3, #8
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001982:	2200      	movs	r2, #0
 8001984:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001988:	4815      	ldr	r0, [pc, #84]	; (80019e0 <MX_GPIO_Init+0xe4>)
 800198a:	f001 f98f 	bl	8002cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800198e:	2200      	movs	r2, #0
 8001990:	2104      	movs	r1, #4
 8001992:	4814      	ldr	r0, [pc, #80]	; (80019e4 <MX_GPIO_Init+0xe8>)
 8001994:	f001 f98a 	bl	8002cac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001998:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800199c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199e:	2301      	movs	r3, #1
 80019a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019aa:	f107 0314 	add.w	r3, r7, #20
 80019ae:	4619      	mov	r1, r3
 80019b0:	480b      	ldr	r0, [pc, #44]	; (80019e0 <MX_GPIO_Init+0xe4>)
 80019b2:	f000 fff7 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019b6:	2304      	movs	r3, #4
 80019b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ba:	2301      	movs	r3, #1
 80019bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019c6:	f107 0314 	add.w	r3, r7, #20
 80019ca:	4619      	mov	r1, r3
 80019cc:	4805      	ldr	r0, [pc, #20]	; (80019e4 <MX_GPIO_Init+0xe8>)
 80019ce:	f000 ffe9 	bl	80029a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019d2:	bf00      	nop
 80019d4:	3728      	adds	r7, #40	; 0x28
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40020400 	.word	0x40020400
 80019e4:	40020c00 	.word	0x40020c00

080019e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019ec:	b672      	cpsid	i
}
 80019ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019f0:	e7fe      	b.n	80019f0 <Error_Handler+0x8>
	...

080019f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	607b      	str	r3, [r7, #4]
 80019fe:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <HAL_MspInit+0x4c>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	4a0f      	ldr	r2, [pc, #60]	; (8001a40 <HAL_MspInit+0x4c>)
 8001a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a08:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0a:	4b0d      	ldr	r3, [pc, #52]	; (8001a40 <HAL_MspInit+0x4c>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	603b      	str	r3, [r7, #0]
 8001a1a:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <HAL_MspInit+0x4c>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	4a08      	ldr	r2, [pc, #32]	; (8001a40 <HAL_MspInit+0x4c>)
 8001a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a24:	6413      	str	r3, [r2, #64]	; 0x40
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_MspInit+0x4c>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2e:	603b      	str	r3, [r7, #0]
 8001a30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a32:	2007      	movs	r0, #7
 8001a34:	f000 fc04 	bl	8002240 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40023800 	.word	0x40023800

08001a44 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a0e      	ldr	r2, [pc, #56]	; (8001a8c <HAL_TIM_PWM_MspInit+0x48>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d115      	bne.n	8001a82 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <HAL_TIM_PWM_MspInit+0x4c>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	4a0c      	ldr	r2, [pc, #48]	; (8001a90 <HAL_TIM_PWM_MspInit+0x4c>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6453      	str	r3, [r2, #68]	; 0x44
 8001a66:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <HAL_TIM_PWM_MspInit+0x4c>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2100      	movs	r1, #0
 8001a76:	2018      	movs	r0, #24
 8001a78:	f000 fbed 	bl	8002256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001a7c:	2018      	movs	r0, #24
 8001a7e:	f000 fc06 	bl	800228e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40010000 	.word	0x40010000
 8001a90:	40023800 	.word	0x40023800

08001a94 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b090      	sub	sp, #64	; 0x40
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab4:	d14a      	bne.n	8001b4c <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aba:	4b71      	ldr	r3, [pc, #452]	; (8001c80 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	4a70      	ldr	r2, [pc, #448]	; (8001c80 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac6:	4b6e      	ldr	r3, [pc, #440]	; (8001c80 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad6:	4b6a      	ldr	r3, [pc, #424]	; (8001c80 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a69      	ldr	r2, [pc, #420]	; (8001c80 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b67      	ldr	r3, [pc, #412]	; (8001c80 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	623b      	str	r3, [r7, #32]
 8001af2:	4b63      	ldr	r3, [pc, #396]	; (8001c80 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a62      	ldr	r2, [pc, #392]	; (8001c80 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001af8:	f043 0302 	orr.w	r3, r3, #2
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b60      	ldr	r3, [pc, #384]	; (8001c80 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	623b      	str	r3, [r7, #32]
 8001b08:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b0a:	2320      	movs	r3, #32
 8001b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b22:	4619      	mov	r1, r3
 8001b24:	4857      	ldr	r0, [pc, #348]	; (8001c84 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8001b26:	f000 ff3d 	bl	80029a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b2a:	2308      	movs	r3, #8
 8001b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b36:	2300      	movs	r3, #0
 8001b38:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b42:	4619      	mov	r1, r3
 8001b44:	4850      	ldr	r0, [pc, #320]	; (8001c88 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8001b46:	f000 ff2d 	bl	80029a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001b4a:	e094      	b.n	8001c76 <HAL_TIM_Encoder_MspInit+0x1e2>
  else if(htim_encoder->Instance==TIM3)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a4e      	ldr	r2, [pc, #312]	; (8001c8c <HAL_TIM_Encoder_MspInit+0x1f8>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d12c      	bne.n	8001bb0 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
 8001b5a:	4b49      	ldr	r3, [pc, #292]	; (8001c80 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	4a48      	ldr	r2, [pc, #288]	; (8001c80 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001b60:	f043 0302 	orr.w	r3, r3, #2
 8001b64:	6413      	str	r3, [r2, #64]	; 0x40
 8001b66:	4b46      	ldr	r3, [pc, #280]	; (8001c80 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	61fb      	str	r3, [r7, #28]
 8001b70:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	61bb      	str	r3, [r7, #24]
 8001b76:	4b42      	ldr	r3, [pc, #264]	; (8001c80 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a41      	ldr	r2, [pc, #260]	; (8001c80 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b3f      	ldr	r3, [pc, #252]	; (8001c80 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	61bb      	str	r3, [r7, #24]
 8001b8c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b8e:	23c0      	movs	r3, #192	; 0xc0
 8001b90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b92:	2302      	movs	r3, #2
 8001b94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4836      	ldr	r0, [pc, #216]	; (8001c84 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8001baa:	f000 fefb 	bl	80029a4 <HAL_GPIO_Init>
}
 8001bae:	e062      	b.n	8001c76 <HAL_TIM_Encoder_MspInit+0x1e2>
  else if(htim_encoder->Instance==TIM4)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a36      	ldr	r2, [pc, #216]	; (8001c90 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d12c      	bne.n	8001c14 <HAL_TIM_Encoder_MspInit+0x180>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	4b30      	ldr	r3, [pc, #192]	; (8001c80 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	4a2f      	ldr	r2, [pc, #188]	; (8001c80 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001bc4:	f043 0304 	orr.w	r3, r3, #4
 8001bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bca:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	4b29      	ldr	r3, [pc, #164]	; (8001c80 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a28      	ldr	r2, [pc, #160]	; (8001c80 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001be0:	f043 0302 	orr.w	r3, r3, #2
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b26      	ldr	r3, [pc, #152]	; (8001c80 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bf2:	23c0      	movs	r3, #192	; 0xc0
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c02:	2302      	movs	r3, #2
 8001c04:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	481e      	ldr	r0, [pc, #120]	; (8001c88 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8001c0e:	f000 fec9 	bl	80029a4 <HAL_GPIO_Init>
}
 8001c12:	e030      	b.n	8001c76 <HAL_TIM_Encoder_MspInit+0x1e2>
  else if(htim_encoder->Instance==TIM5)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a1e      	ldr	r2, [pc, #120]	; (8001c94 <HAL_TIM_Encoder_MspInit+0x200>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d12b      	bne.n	8001c76 <HAL_TIM_Encoder_MspInit+0x1e2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	4b17      	ldr	r3, [pc, #92]	; (8001c80 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	4a16      	ldr	r2, [pc, #88]	; (8001c80 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001c28:	f043 0308 	orr.w	r3, r3, #8
 8001c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2e:	4b14      	ldr	r3, [pc, #80]	; (8001c80 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	4a0f      	ldr	r2, [pc, #60]	; (8001c80 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c56:	2303      	movs	r3, #3
 8001c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c62:	2300      	movs	r3, #0
 8001c64:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001c66:	2302      	movs	r3, #2
 8001c68:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4804      	ldr	r0, [pc, #16]	; (8001c84 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8001c72:	f000 fe97 	bl	80029a4 <HAL_GPIO_Init>
}
 8001c76:	bf00      	nop
 8001c78:	3740      	adds	r7, #64	; 0x40
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40020000 	.word	0x40020000
 8001c88:	40020400 	.word	0x40020400
 8001c8c:	40000400 	.word	0x40000400
 8001c90:	40000800 	.word	0x40000800
 8001c94:	40000c00 	.word	0x40000c00

08001c98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a0e      	ldr	r2, [pc, #56]	; (8001ce0 <HAL_TIM_Base_MspInit+0x48>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d115      	bne.n	8001cd6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	4b0d      	ldr	r3, [pc, #52]	; (8001ce4 <HAL_TIM_Base_MspInit+0x4c>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	4a0c      	ldr	r2, [pc, #48]	; (8001ce4 <HAL_TIM_Base_MspInit+0x4c>)
 8001cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cba:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <HAL_TIM_Base_MspInit+0x4c>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2100      	movs	r1, #0
 8001cca:	2018      	movs	r0, #24
 8001ccc:	f000 fac3 	bl	8002256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001cd0:	2018      	movs	r0, #24
 8001cd2:	f000 fadc 	bl	800228e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40014000 	.word	0x40014000
 8001ce4:	40023800 	.word	0x40023800

08001ce8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 030c 	add.w	r3, r7, #12
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a12      	ldr	r2, [pc, #72]	; (8001d50 <HAL_TIM_MspPostInit+0x68>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d11e      	bne.n	8001d48 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <HAL_TIM_MspPostInit+0x6c>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a10      	ldr	r2, [pc, #64]	; (8001d54 <HAL_TIM_MspPostInit+0x6c>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <HAL_TIM_MspPostInit+0x6c>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001d26:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001d2a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3c:	f107 030c 	add.w	r3, r7, #12
 8001d40:	4619      	mov	r1, r3
 8001d42:	4805      	ldr	r0, [pc, #20]	; (8001d58 <HAL_TIM_MspPostInit+0x70>)
 8001d44:	f000 fe2e 	bl	80029a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d48:	bf00      	nop
 8001d4a:	3720      	adds	r7, #32
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40010000 	.word	0x40010000
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40020000 	.word	0x40020000

08001d5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08c      	sub	sp, #48	; 0x30
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	f107 031c 	add.w	r3, r7, #28
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a4a      	ldr	r2, [pc, #296]	; (8001ea4 <HAL_UART_MspInit+0x148>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d15c      	bne.n	8001e38 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61bb      	str	r3, [r7, #24]
 8001d82:	4b49      	ldr	r3, [pc, #292]	; (8001ea8 <HAL_UART_MspInit+0x14c>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	4a48      	ldr	r2, [pc, #288]	; (8001ea8 <HAL_UART_MspInit+0x14c>)
 8001d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8e:	4b46      	ldr	r3, [pc, #280]	; (8001ea8 <HAL_UART_MspInit+0x14c>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d96:	61bb      	str	r3, [r7, #24]
 8001d98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	4b42      	ldr	r3, [pc, #264]	; (8001ea8 <HAL_UART_MspInit+0x14c>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a41      	ldr	r2, [pc, #260]	; (8001ea8 <HAL_UART_MspInit+0x14c>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b3f      	ldr	r3, [pc, #252]	; (8001ea8 <HAL_UART_MspInit+0x14c>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001db6:	230c      	movs	r3, #12
 8001db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dc6:	2307      	movs	r3, #7
 8001dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dca:	f107 031c 	add.w	r3, r7, #28
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4836      	ldr	r0, [pc, #216]	; (8001eac <HAL_UART_MspInit+0x150>)
 8001dd2:	f000 fde7 	bl	80029a4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001dd6:	4b36      	ldr	r3, [pc, #216]	; (8001eb0 <HAL_UART_MspInit+0x154>)
 8001dd8:	4a36      	ldr	r2, [pc, #216]	; (8001eb4 <HAL_UART_MspInit+0x158>)
 8001dda:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001ddc:	4b34      	ldr	r3, [pc, #208]	; (8001eb0 <HAL_UART_MspInit+0x154>)
 8001dde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001de2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001de4:	4b32      	ldr	r3, [pc, #200]	; (8001eb0 <HAL_UART_MspInit+0x154>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dea:	4b31      	ldr	r3, [pc, #196]	; (8001eb0 <HAL_UART_MspInit+0x154>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001df0:	4b2f      	ldr	r3, [pc, #188]	; (8001eb0 <HAL_UART_MspInit+0x154>)
 8001df2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001df6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001df8:	4b2d      	ldr	r3, [pc, #180]	; (8001eb0 <HAL_UART_MspInit+0x154>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dfe:	4b2c      	ldr	r3, [pc, #176]	; (8001eb0 <HAL_UART_MspInit+0x154>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001e04:	4b2a      	ldr	r3, [pc, #168]	; (8001eb0 <HAL_UART_MspInit+0x154>)
 8001e06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e0a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001e0c:	4b28      	ldr	r3, [pc, #160]	; (8001eb0 <HAL_UART_MspInit+0x154>)
 8001e0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e12:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e14:	4b26      	ldr	r3, [pc, #152]	; (8001eb0 <HAL_UART_MspInit+0x154>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001e1a:	4825      	ldr	r0, [pc, #148]	; (8001eb0 <HAL_UART_MspInit+0x154>)
 8001e1c:	f000 fa52 	bl	80022c4 <HAL_DMA_Init>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001e26:	f7ff fddf 	bl	80019e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a20      	ldr	r2, [pc, #128]	; (8001eb0 <HAL_UART_MspInit+0x154>)
 8001e2e:	639a      	str	r2, [r3, #56]	; 0x38
 8001e30:	4a1f      	ldr	r2, [pc, #124]	; (8001eb0 <HAL_UART_MspInit+0x154>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001e36:	e030      	b.n	8001e9a <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART6)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a1e      	ldr	r2, [pc, #120]	; (8001eb8 <HAL_UART_MspInit+0x15c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d12b      	bne.n	8001e9a <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <HAL_UART_MspInit+0x14c>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	4a17      	ldr	r2, [pc, #92]	; (8001ea8 <HAL_UART_MspInit+0x14c>)
 8001e4c:	f043 0320 	orr.w	r3, r3, #32
 8001e50:	6453      	str	r3, [r2, #68]	; 0x44
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <HAL_UART_MspInit+0x14c>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e56:	f003 0320 	and.w	r3, r3, #32
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <HAL_UART_MspInit+0x14c>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	4a10      	ldr	r2, [pc, #64]	; (8001ea8 <HAL_UART_MspInit+0x14c>)
 8001e68:	f043 0304 	orr.w	r3, r3, #4
 8001e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <HAL_UART_MspInit+0x14c>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e7a:	23c0      	movs	r3, #192	; 0xc0
 8001e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e86:	2303      	movs	r3, #3
 8001e88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001e8a:	2308      	movs	r3, #8
 8001e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e8e:	f107 031c 	add.w	r3, r7, #28
 8001e92:	4619      	mov	r1, r3
 8001e94:	4809      	ldr	r0, [pc, #36]	; (8001ebc <HAL_UART_MspInit+0x160>)
 8001e96:	f000 fd85 	bl	80029a4 <HAL_GPIO_Init>
}
 8001e9a:	bf00      	nop
 8001e9c:	3730      	adds	r7, #48	; 0x30
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40004400 	.word	0x40004400
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40020000 	.word	0x40020000
 8001eb0:	200002ac 	.word	0x200002ac
 8001eb4:	40026088 	.word	0x40026088
 8001eb8:	40011400 	.word	0x40011400
 8001ebc:	40020800 	.word	0x40020800

08001ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ec4:	e7fe      	b.n	8001ec4 <NMI_Handler+0x4>

08001ec6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eca:	e7fe      	b.n	8001eca <HardFault_Handler+0x4>

08001ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ed0:	e7fe      	b.n	8001ed0 <MemManage_Handler+0x4>

08001ed2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ed6:	e7fe      	b.n	8001ed6 <BusFault_Handler+0x4>

08001ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001edc:	e7fe      	b.n	8001edc <UsageFault_Handler+0x4>

08001ede <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f0c:	f000 f8a8 	bl	8002060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f10:	bf00      	nop
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001f18:	4802      	ldr	r0, [pc, #8]	; (8001f24 <DMA1_Stream5_IRQHandler+0x10>)
 8001f1a:	f000 fad9 	bl	80024d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	200002ac 	.word	0x200002ac

08001f28 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f2c:	4803      	ldr	r0, [pc, #12]	; (8001f3c <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8001f2e:	f001 fe55 	bl	8003bdc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001f32:	4803      	ldr	r0, [pc, #12]	; (8001f40 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8001f34:	f001 fe52 	bl	8003bdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000074 	.word	0x20000074
 8001f40:	200001dc 	.word	0x200001dc

08001f44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <SystemInit+0x20>)
 8001f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4e:	4a05      	ldr	r2, [pc, #20]	; (8001f64 <SystemInit+0x20>)
 8001f50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fa0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f6c:	480d      	ldr	r0, [pc, #52]	; (8001fa4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f6e:	490e      	ldr	r1, [pc, #56]	; (8001fa8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f70:	4a0e      	ldr	r2, [pc, #56]	; (8001fac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f74:	e002      	b.n	8001f7c <LoopCopyDataInit>

08001f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f7a:	3304      	adds	r3, #4

08001f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f80:	d3f9      	bcc.n	8001f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f82:	4a0b      	ldr	r2, [pc, #44]	; (8001fb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f84:	4c0b      	ldr	r4, [pc, #44]	; (8001fb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f88:	e001      	b.n	8001f8e <LoopFillZerobss>

08001f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f8c:	3204      	adds	r2, #4

08001f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f90:	d3fb      	bcc.n	8001f8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f92:	f7ff ffd7 	bl	8001f44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f96:	f003 f9af 	bl	80052f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f9a:	f7fe fe25 	bl	8000be8 <main>
  bx  lr    
 8001f9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fa0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa8:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8001fac:	08005424 	.word	0x08005424
  ldr r2, =_sbss
 8001fb0:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001fb4:	2000034c 	.word	0x2000034c

08001fb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fb8:	e7fe      	b.n	8001fb8 <ADC_IRQHandler>
	...

08001fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <HAL_Init+0x40>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a0d      	ldr	r2, [pc, #52]	; (8001ffc <HAL_Init+0x40>)
 8001fc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <HAL_Init+0x40>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a0a      	ldr	r2, [pc, #40]	; (8001ffc <HAL_Init+0x40>)
 8001fd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <HAL_Init+0x40>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a07      	ldr	r2, [pc, #28]	; (8001ffc <HAL_Init+0x40>)
 8001fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fe4:	2003      	movs	r0, #3
 8001fe6:	f000 f92b 	bl	8002240 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fea:	2000      	movs	r0, #0
 8001fec:	f000 f808 	bl	8002000 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ff0:	f7ff fd00 	bl	80019f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40023c00 	.word	0x40023c00

08002000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002008:	4b12      	ldr	r3, [pc, #72]	; (8002054 <HAL_InitTick+0x54>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4b12      	ldr	r3, [pc, #72]	; (8002058 <HAL_InitTick+0x58>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	4619      	mov	r1, r3
 8002012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002016:	fbb3 f3f1 	udiv	r3, r3, r1
 800201a:	fbb2 f3f3 	udiv	r3, r2, r3
 800201e:	4618      	mov	r0, r3
 8002020:	f000 f943 	bl	80022aa <HAL_SYSTICK_Config>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e00e      	b.n	800204c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b0f      	cmp	r3, #15
 8002032:	d80a      	bhi.n	800204a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002034:	2200      	movs	r2, #0
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800203c:	f000 f90b 	bl	8002256 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002040:	4a06      	ldr	r2, [pc, #24]	; (800205c <HAL_InitTick+0x5c>)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002046:	2300      	movs	r3, #0
 8002048:	e000      	b.n	800204c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
}
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	2000004c 	.word	0x2000004c
 8002058:	20000054 	.word	0x20000054
 800205c:	20000050 	.word	0x20000050

08002060 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002064:	4b06      	ldr	r3, [pc, #24]	; (8002080 <HAL_IncTick+0x20>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	461a      	mov	r2, r3
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_IncTick+0x24>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4413      	add	r3, r2
 8002070:	4a04      	ldr	r2, [pc, #16]	; (8002084 <HAL_IncTick+0x24>)
 8002072:	6013      	str	r3, [r2, #0]
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	20000054 	.word	0x20000054
 8002084:	20000348 	.word	0x20000348

08002088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return uwTick;
 800208c:	4b03      	ldr	r3, [pc, #12]	; (800209c <HAL_GetTick+0x14>)
 800208e:	681b      	ldr	r3, [r3, #0]
}
 8002090:	4618      	mov	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	20000348 	.word	0x20000348

080020a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <__NVIC_SetPriorityGrouping+0x44>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020bc:	4013      	ands	r3, r2
 80020be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020d2:	4a04      	ldr	r2, [pc, #16]	; (80020e4 <__NVIC_SetPriorityGrouping+0x44>)
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	60d3      	str	r3, [r2, #12]
}
 80020d8:	bf00      	nop
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020ec:	4b04      	ldr	r3, [pc, #16]	; (8002100 <__NVIC_GetPriorityGrouping+0x18>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	0a1b      	lsrs	r3, r3, #8
 80020f2:	f003 0307 	and.w	r3, r3, #7
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800210e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002112:	2b00      	cmp	r3, #0
 8002114:	db0b      	blt.n	800212e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	f003 021f 	and.w	r2, r3, #31
 800211c:	4907      	ldr	r1, [pc, #28]	; (800213c <__NVIC_EnableIRQ+0x38>)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	095b      	lsrs	r3, r3, #5
 8002124:	2001      	movs	r0, #1
 8002126:	fa00 f202 	lsl.w	r2, r0, r2
 800212a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	e000e100 	.word	0xe000e100

08002140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	6039      	str	r1, [r7, #0]
 800214a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800214c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002150:	2b00      	cmp	r3, #0
 8002152:	db0a      	blt.n	800216a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	b2da      	uxtb	r2, r3
 8002158:	490c      	ldr	r1, [pc, #48]	; (800218c <__NVIC_SetPriority+0x4c>)
 800215a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215e:	0112      	lsls	r2, r2, #4
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	440b      	add	r3, r1
 8002164:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002168:	e00a      	b.n	8002180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	b2da      	uxtb	r2, r3
 800216e:	4908      	ldr	r1, [pc, #32]	; (8002190 <__NVIC_SetPriority+0x50>)
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	3b04      	subs	r3, #4
 8002178:	0112      	lsls	r2, r2, #4
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	440b      	add	r3, r1
 800217e:	761a      	strb	r2, [r3, #24]
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	e000e100 	.word	0xe000e100
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002194:	b480      	push	{r7}
 8002196:	b089      	sub	sp, #36	; 0x24
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f1c3 0307 	rsb	r3, r3, #7
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	bf28      	it	cs
 80021b2:	2304      	movcs	r3, #4
 80021b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3304      	adds	r3, #4
 80021ba:	2b06      	cmp	r3, #6
 80021bc:	d902      	bls.n	80021c4 <NVIC_EncodePriority+0x30>
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	3b03      	subs	r3, #3
 80021c2:	e000      	b.n	80021c6 <NVIC_EncodePriority+0x32>
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43da      	mvns	r2, r3
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	401a      	ands	r2, r3
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	fa01 f303 	lsl.w	r3, r1, r3
 80021e6:	43d9      	mvns	r1, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ec:	4313      	orrs	r3, r2
         );
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3724      	adds	r7, #36	; 0x24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
	...

080021fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3b01      	subs	r3, #1
 8002208:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800220c:	d301      	bcc.n	8002212 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800220e:	2301      	movs	r3, #1
 8002210:	e00f      	b.n	8002232 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002212:	4a0a      	ldr	r2, [pc, #40]	; (800223c <SysTick_Config+0x40>)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3b01      	subs	r3, #1
 8002218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800221a:	210f      	movs	r1, #15
 800221c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002220:	f7ff ff8e 	bl	8002140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002224:	4b05      	ldr	r3, [pc, #20]	; (800223c <SysTick_Config+0x40>)
 8002226:	2200      	movs	r2, #0
 8002228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800222a:	4b04      	ldr	r3, [pc, #16]	; (800223c <SysTick_Config+0x40>)
 800222c:	2207      	movs	r2, #7
 800222e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	e000e010 	.word	0xe000e010

08002240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7ff ff29 	bl	80020a0 <__NVIC_SetPriorityGrouping>
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002256:	b580      	push	{r7, lr}
 8002258:	b086      	sub	sp, #24
 800225a:	af00      	add	r7, sp, #0
 800225c:	4603      	mov	r3, r0
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	607a      	str	r2, [r7, #4]
 8002262:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002268:	f7ff ff3e 	bl	80020e8 <__NVIC_GetPriorityGrouping>
 800226c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	68b9      	ldr	r1, [r7, #8]
 8002272:	6978      	ldr	r0, [r7, #20]
 8002274:	f7ff ff8e 	bl	8002194 <NVIC_EncodePriority>
 8002278:	4602      	mov	r2, r0
 800227a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800227e:	4611      	mov	r1, r2
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff ff5d 	bl	8002140 <__NVIC_SetPriority>
}
 8002286:	bf00      	nop
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b082      	sub	sp, #8
 8002292:	af00      	add	r7, sp, #0
 8002294:	4603      	mov	r3, r0
 8002296:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff ff31 	bl	8002104 <__NVIC_EnableIRQ>
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff ffa2 	bl	80021fc <SysTick_Config>
 80022b8:	4603      	mov	r3, r0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022d0:	f7ff feda 	bl	8002088 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e099      	b.n	8002414 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2202      	movs	r2, #2
 80022e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0201 	bic.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002300:	e00f      	b.n	8002322 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002302:	f7ff fec1 	bl	8002088 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b05      	cmp	r3, #5
 800230e:	d908      	bls.n	8002322 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2220      	movs	r2, #32
 8002314:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2203      	movs	r2, #3
 800231a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e078      	b.n	8002414 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1e8      	bne.n	8002302 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	4b38      	ldr	r3, [pc, #224]	; (800241c <HAL_DMA_Init+0x158>)
 800233c:	4013      	ands	r3, r2
 800233e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800234e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800235a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002366:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	4313      	orrs	r3, r2
 8002372:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	2b04      	cmp	r3, #4
 800237a:	d107      	bne.n	800238c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	4313      	orrs	r3, r2
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	4313      	orrs	r3, r2
 800238a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	f023 0307 	bic.w	r3, r3, #7
 80023a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d117      	bne.n	80023e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	4313      	orrs	r3, r2
 80023be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00e      	beq.n	80023e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 fa6f 	bl	80028ac <DMA_CheckFifoParam>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2240      	movs	r2, #64	; 0x40
 80023d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80023e2:	2301      	movs	r3, #1
 80023e4:	e016      	b.n	8002414 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 fa26 	bl	8002840 <DMA_CalcBaseAndBitshift>
 80023f4:	4603      	mov	r3, r0
 80023f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fc:	223f      	movs	r2, #63	; 0x3f
 80023fe:	409a      	lsls	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	f010803f 	.word	0xf010803f

08002420 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
 800242c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800242e:	2300      	movs	r3, #0
 8002430:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002436:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <HAL_DMA_Start_IT+0x26>
 8002442:	2302      	movs	r3, #2
 8002444:	e040      	b.n	80024c8 <HAL_DMA_Start_IT+0xa8>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b01      	cmp	r3, #1
 8002458:	d12f      	bne.n	80024ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2202      	movs	r2, #2
 800245e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	68b9      	ldr	r1, [r7, #8]
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 f9b8 	bl	80027e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002478:	223f      	movs	r2, #63	; 0x3f
 800247a:	409a      	lsls	r2, r3
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0216 	orr.w	r2, r2, #22
 800248e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	2b00      	cmp	r3, #0
 8002496:	d007      	beq.n	80024a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0208 	orr.w	r2, r2, #8
 80024a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0201 	orr.w	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	e005      	b.n	80024c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024c2:	2302      	movs	r3, #2
 80024c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024dc:	4b8e      	ldr	r3, [pc, #568]	; (8002718 <HAL_DMA_IRQHandler+0x248>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a8e      	ldr	r2, [pc, #568]	; (800271c <HAL_DMA_IRQHandler+0x24c>)
 80024e2:	fba2 2303 	umull	r2, r3, r2, r3
 80024e6:	0a9b      	lsrs	r3, r3, #10
 80024e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fa:	2208      	movs	r2, #8
 80024fc:	409a      	lsls	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4013      	ands	r3, r2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d01a      	beq.n	800253c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d013      	beq.n	800253c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0204 	bic.w	r2, r2, #4
 8002522:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002528:	2208      	movs	r2, #8
 800252a:	409a      	lsls	r2, r3
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002534:	f043 0201 	orr.w	r2, r3, #1
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002540:	2201      	movs	r2, #1
 8002542:	409a      	lsls	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4013      	ands	r3, r2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d012      	beq.n	8002572 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00b      	beq.n	8002572 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255e:	2201      	movs	r2, #1
 8002560:	409a      	lsls	r2, r3
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256a:	f043 0202 	orr.w	r2, r3, #2
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002576:	2204      	movs	r2, #4
 8002578:	409a      	lsls	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	4013      	ands	r3, r2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d012      	beq.n	80025a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00b      	beq.n	80025a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002594:	2204      	movs	r2, #4
 8002596:	409a      	lsls	r2, r3
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a0:	f043 0204 	orr.w	r2, r3, #4
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ac:	2210      	movs	r2, #16
 80025ae:	409a      	lsls	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d043      	beq.n	8002640 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d03c      	beq.n	8002640 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ca:	2210      	movs	r2, #16
 80025cc:	409a      	lsls	r2, r3
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d018      	beq.n	8002612 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d108      	bne.n	8002600 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d024      	beq.n	8002640 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	4798      	blx	r3
 80025fe:	e01f      	b.n	8002640 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002604:	2b00      	cmp	r3, #0
 8002606:	d01b      	beq.n	8002640 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	4798      	blx	r3
 8002610:	e016      	b.n	8002640 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261c:	2b00      	cmp	r3, #0
 800261e:	d107      	bne.n	8002630 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0208 	bic.w	r2, r2, #8
 800262e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002644:	2220      	movs	r2, #32
 8002646:	409a      	lsls	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4013      	ands	r3, r2
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 808f 	beq.w	8002770 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0310 	and.w	r3, r3, #16
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 8087 	beq.w	8002770 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002666:	2220      	movs	r2, #32
 8002668:	409a      	lsls	r2, r3
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b05      	cmp	r3, #5
 8002678:	d136      	bne.n	80026e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0216 	bic.w	r2, r2, #22
 8002688:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	695a      	ldr	r2, [r3, #20]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002698:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d103      	bne.n	80026aa <HAL_DMA_IRQHandler+0x1da>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d007      	beq.n	80026ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0208 	bic.w	r2, r2, #8
 80026b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026be:	223f      	movs	r2, #63	; 0x3f
 80026c0:	409a      	lsls	r2, r3
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d07e      	beq.n	80027dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	4798      	blx	r3
        }
        return;
 80026e6:	e079      	b.n	80027dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d01d      	beq.n	8002732 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10d      	bne.n	8002720 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002708:	2b00      	cmp	r3, #0
 800270a:	d031      	beq.n	8002770 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	4798      	blx	r3
 8002714:	e02c      	b.n	8002770 <HAL_DMA_IRQHandler+0x2a0>
 8002716:	bf00      	nop
 8002718:	2000004c 	.word	0x2000004c
 800271c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002724:	2b00      	cmp	r3, #0
 8002726:	d023      	beq.n	8002770 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	4798      	blx	r3
 8002730:	e01e      	b.n	8002770 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10f      	bne.n	8002760 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0210 	bic.w	r2, r2, #16
 800274e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002774:	2b00      	cmp	r3, #0
 8002776:	d032      	beq.n	80027de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b00      	cmp	r3, #0
 8002782:	d022      	beq.n	80027ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2205      	movs	r2, #5
 8002788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0201 	bic.w	r2, r2, #1
 800279a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	3301      	adds	r3, #1
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d307      	bcc.n	80027b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f2      	bne.n	800279c <HAL_DMA_IRQHandler+0x2cc>
 80027b6:	e000      	b.n	80027ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80027b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d005      	beq.n	80027de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	4798      	blx	r3
 80027da:	e000      	b.n	80027de <HAL_DMA_IRQHandler+0x30e>
        return;
 80027dc:	bf00      	nop
    }
  }
}
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
 80027f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002800:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	2b40      	cmp	r3, #64	; 0x40
 8002810:	d108      	bne.n	8002824 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002822:	e007      	b.n	8002834 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	60da      	str	r2, [r3, #12]
}
 8002834:	bf00      	nop
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	3b10      	subs	r3, #16
 8002850:	4a14      	ldr	r2, [pc, #80]	; (80028a4 <DMA_CalcBaseAndBitshift+0x64>)
 8002852:	fba2 2303 	umull	r2, r3, r2, r3
 8002856:	091b      	lsrs	r3, r3, #4
 8002858:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800285a:	4a13      	ldr	r2, [pc, #76]	; (80028a8 <DMA_CalcBaseAndBitshift+0x68>)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4413      	add	r3, r2
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	461a      	mov	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2b03      	cmp	r3, #3
 800286c:	d909      	bls.n	8002882 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002876:	f023 0303 	bic.w	r3, r3, #3
 800287a:	1d1a      	adds	r2, r3, #4
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	659a      	str	r2, [r3, #88]	; 0x58
 8002880:	e007      	b.n	8002892 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800288a:	f023 0303 	bic.w	r3, r3, #3
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002896:	4618      	mov	r0, r3
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	aaaaaaab 	.word	0xaaaaaaab
 80028a8:	0800540c 	.word	0x0800540c

080028ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028b4:	2300      	movs	r3, #0
 80028b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d11f      	bne.n	8002906 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	2b03      	cmp	r3, #3
 80028ca:	d856      	bhi.n	800297a <DMA_CheckFifoParam+0xce>
 80028cc:	a201      	add	r2, pc, #4	; (adr r2, 80028d4 <DMA_CheckFifoParam+0x28>)
 80028ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d2:	bf00      	nop
 80028d4:	080028e5 	.word	0x080028e5
 80028d8:	080028f7 	.word	0x080028f7
 80028dc:	080028e5 	.word	0x080028e5
 80028e0:	0800297b 	.word	0x0800297b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d046      	beq.n	800297e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028f4:	e043      	b.n	800297e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028fe:	d140      	bne.n	8002982 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002904:	e03d      	b.n	8002982 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800290e:	d121      	bne.n	8002954 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	2b03      	cmp	r3, #3
 8002914:	d837      	bhi.n	8002986 <DMA_CheckFifoParam+0xda>
 8002916:	a201      	add	r2, pc, #4	; (adr r2, 800291c <DMA_CheckFifoParam+0x70>)
 8002918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800291c:	0800292d 	.word	0x0800292d
 8002920:	08002933 	.word	0x08002933
 8002924:	0800292d 	.word	0x0800292d
 8002928:	08002945 	.word	0x08002945
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	73fb      	strb	r3, [r7, #15]
      break;
 8002930:	e030      	b.n	8002994 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002936:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d025      	beq.n	800298a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002942:	e022      	b.n	800298a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002948:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800294c:	d11f      	bne.n	800298e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002952:	e01c      	b.n	800298e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	2b02      	cmp	r3, #2
 8002958:	d903      	bls.n	8002962 <DMA_CheckFifoParam+0xb6>
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	2b03      	cmp	r3, #3
 800295e:	d003      	beq.n	8002968 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002960:	e018      	b.n	8002994 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	73fb      	strb	r3, [r7, #15]
      break;
 8002966:	e015      	b.n	8002994 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00e      	beq.n	8002992 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	73fb      	strb	r3, [r7, #15]
      break;
 8002978:	e00b      	b.n	8002992 <DMA_CheckFifoParam+0xe6>
      break;
 800297a:	bf00      	nop
 800297c:	e00a      	b.n	8002994 <DMA_CheckFifoParam+0xe8>
      break;
 800297e:	bf00      	nop
 8002980:	e008      	b.n	8002994 <DMA_CheckFifoParam+0xe8>
      break;
 8002982:	bf00      	nop
 8002984:	e006      	b.n	8002994 <DMA_CheckFifoParam+0xe8>
      break;
 8002986:	bf00      	nop
 8002988:	e004      	b.n	8002994 <DMA_CheckFifoParam+0xe8>
      break;
 800298a:	bf00      	nop
 800298c:	e002      	b.n	8002994 <DMA_CheckFifoParam+0xe8>
      break;   
 800298e:	bf00      	nop
 8002990:	e000      	b.n	8002994 <DMA_CheckFifoParam+0xe8>
      break;
 8002992:	bf00      	nop
    }
  } 
  
  return status; 
 8002994:	7bfb      	ldrb	r3, [r7, #15]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop

080029a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b089      	sub	sp, #36	; 0x24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ba:	2300      	movs	r3, #0
 80029bc:	61fb      	str	r3, [r7, #28]
 80029be:	e159      	b.n	8002c74 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029c0:	2201      	movs	r2, #1
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	4013      	ands	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	429a      	cmp	r2, r3
 80029da:	f040 8148 	bne.w	8002c6e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d005      	beq.n	80029f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d130      	bne.n	8002a58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	2203      	movs	r2, #3
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	091b      	lsrs	r3, r3, #4
 8002a42:	f003 0201 	and.w	r2, r3, #1
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	2b03      	cmp	r3, #3
 8002a62:	d017      	beq.n	8002a94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	2203      	movs	r2, #3
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d123      	bne.n	8002ae8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	08da      	lsrs	r2, r3, #3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3208      	adds	r2, #8
 8002aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	220f      	movs	r2, #15
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	691a      	ldr	r2, [r3, #16]
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	08da      	lsrs	r2, r3, #3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3208      	adds	r2, #8
 8002ae2:	69b9      	ldr	r1, [r7, #24]
 8002ae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	2203      	movs	r2, #3
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 0203 	and.w	r2, r3, #3
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 80a2 	beq.w	8002c6e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	4b57      	ldr	r3, [pc, #348]	; (8002c8c <HAL_GPIO_Init+0x2e8>)
 8002b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b32:	4a56      	ldr	r2, [pc, #344]	; (8002c8c <HAL_GPIO_Init+0x2e8>)
 8002b34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b38:	6453      	str	r3, [r2, #68]	; 0x44
 8002b3a:	4b54      	ldr	r3, [pc, #336]	; (8002c8c <HAL_GPIO_Init+0x2e8>)
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b46:	4a52      	ldr	r2, [pc, #328]	; (8002c90 <HAL_GPIO_Init+0x2ec>)
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	089b      	lsrs	r3, r3, #2
 8002b4c:	3302      	adds	r3, #2
 8002b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	220f      	movs	r2, #15
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4013      	ands	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a49      	ldr	r2, [pc, #292]	; (8002c94 <HAL_GPIO_Init+0x2f0>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d019      	beq.n	8002ba6 <HAL_GPIO_Init+0x202>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a48      	ldr	r2, [pc, #288]	; (8002c98 <HAL_GPIO_Init+0x2f4>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d013      	beq.n	8002ba2 <HAL_GPIO_Init+0x1fe>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a47      	ldr	r2, [pc, #284]	; (8002c9c <HAL_GPIO_Init+0x2f8>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d00d      	beq.n	8002b9e <HAL_GPIO_Init+0x1fa>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a46      	ldr	r2, [pc, #280]	; (8002ca0 <HAL_GPIO_Init+0x2fc>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d007      	beq.n	8002b9a <HAL_GPIO_Init+0x1f6>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a45      	ldr	r2, [pc, #276]	; (8002ca4 <HAL_GPIO_Init+0x300>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d101      	bne.n	8002b96 <HAL_GPIO_Init+0x1f2>
 8002b92:	2304      	movs	r3, #4
 8002b94:	e008      	b.n	8002ba8 <HAL_GPIO_Init+0x204>
 8002b96:	2307      	movs	r3, #7
 8002b98:	e006      	b.n	8002ba8 <HAL_GPIO_Init+0x204>
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e004      	b.n	8002ba8 <HAL_GPIO_Init+0x204>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e002      	b.n	8002ba8 <HAL_GPIO_Init+0x204>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <HAL_GPIO_Init+0x204>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	69fa      	ldr	r2, [r7, #28]
 8002baa:	f002 0203 	and.w	r2, r2, #3
 8002bae:	0092      	lsls	r2, r2, #2
 8002bb0:	4093      	lsls	r3, r2
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bb8:	4935      	ldr	r1, [pc, #212]	; (8002c90 <HAL_GPIO_Init+0x2ec>)
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	089b      	lsrs	r3, r3, #2
 8002bbe:	3302      	adds	r3, #2
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bc6:	4b38      	ldr	r3, [pc, #224]	; (8002ca8 <HAL_GPIO_Init+0x304>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bea:	4a2f      	ldr	r2, [pc, #188]	; (8002ca8 <HAL_GPIO_Init+0x304>)
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bf0:	4b2d      	ldr	r3, [pc, #180]	; (8002ca8 <HAL_GPIO_Init+0x304>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c14:	4a24      	ldr	r2, [pc, #144]	; (8002ca8 <HAL_GPIO_Init+0x304>)
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c1a:	4b23      	ldr	r3, [pc, #140]	; (8002ca8 <HAL_GPIO_Init+0x304>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	43db      	mvns	r3, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4013      	ands	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c3e:	4a1a      	ldr	r2, [pc, #104]	; (8002ca8 <HAL_GPIO_Init+0x304>)
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c44:	4b18      	ldr	r3, [pc, #96]	; (8002ca8 <HAL_GPIO_Init+0x304>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4013      	ands	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c68:	4a0f      	ldr	r2, [pc, #60]	; (8002ca8 <HAL_GPIO_Init+0x304>)
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	3301      	adds	r3, #1
 8002c72:	61fb      	str	r3, [r7, #28]
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	2b0f      	cmp	r3, #15
 8002c78:	f67f aea2 	bls.w	80029c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c7c:	bf00      	nop
 8002c7e:	bf00      	nop
 8002c80:	3724      	adds	r7, #36	; 0x24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	40013800 	.word	0x40013800
 8002c94:	40020000 	.word	0x40020000
 8002c98:	40020400 	.word	0x40020400
 8002c9c:	40020800 	.word	0x40020800
 8002ca0:	40020c00 	.word	0x40020c00
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	40013c00 	.word	0x40013c00

08002cac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	807b      	strh	r3, [r7, #2]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cbc:	787b      	ldrb	r3, [r7, #1]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cc2:	887a      	ldrh	r2, [r7, #2]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cc8:	e003      	b.n	8002cd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cca:	887b      	ldrh	r3, [r7, #2]
 8002ccc:	041a      	lsls	r2, r3, #16
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	619a      	str	r2, [r3, #24]
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
	...

08002ce0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e267      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d075      	beq.n	8002dea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cfe:	4b88      	ldr	r3, [pc, #544]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 030c 	and.w	r3, r3, #12
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d00c      	beq.n	8002d24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d0a:	4b85      	ldr	r3, [pc, #532]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d112      	bne.n	8002d3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d16:	4b82      	ldr	r3, [pc, #520]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d22:	d10b      	bne.n	8002d3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d24:	4b7e      	ldr	r3, [pc, #504]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d05b      	beq.n	8002de8 <HAL_RCC_OscConfig+0x108>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d157      	bne.n	8002de8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e242      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d44:	d106      	bne.n	8002d54 <HAL_RCC_OscConfig+0x74>
 8002d46:	4b76      	ldr	r3, [pc, #472]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a75      	ldr	r2, [pc, #468]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	e01d      	b.n	8002d90 <HAL_RCC_OscConfig+0xb0>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d5c:	d10c      	bne.n	8002d78 <HAL_RCC_OscConfig+0x98>
 8002d5e:	4b70      	ldr	r3, [pc, #448]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a6f      	ldr	r2, [pc, #444]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	4b6d      	ldr	r3, [pc, #436]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a6c      	ldr	r2, [pc, #432]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	e00b      	b.n	8002d90 <HAL_RCC_OscConfig+0xb0>
 8002d78:	4b69      	ldr	r3, [pc, #420]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a68      	ldr	r2, [pc, #416]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	4b66      	ldr	r3, [pc, #408]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a65      	ldr	r2, [pc, #404]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d013      	beq.n	8002dc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d98:	f7ff f976 	bl	8002088 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002da0:	f7ff f972 	bl	8002088 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b64      	cmp	r3, #100	; 0x64
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e207      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db2:	4b5b      	ldr	r3, [pc, #364]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCC_OscConfig+0xc0>
 8002dbe:	e014      	b.n	8002dea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f7ff f962 	bl	8002088 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dc8:	f7ff f95e 	bl	8002088 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b64      	cmp	r3, #100	; 0x64
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e1f3      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dda:	4b51      	ldr	r3, [pc, #324]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0xe8>
 8002de6:	e000      	b.n	8002dea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d063      	beq.n	8002ebe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002df6:	4b4a      	ldr	r3, [pc, #296]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 030c 	and.w	r3, r3, #12
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00b      	beq.n	8002e1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e02:	4b47      	ldr	r3, [pc, #284]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e0a:	2b08      	cmp	r3, #8
 8002e0c:	d11c      	bne.n	8002e48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e0e:	4b44      	ldr	r3, [pc, #272]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d116      	bne.n	8002e48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e1a:	4b41      	ldr	r3, [pc, #260]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d005      	beq.n	8002e32 <HAL_RCC_OscConfig+0x152>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d001      	beq.n	8002e32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e1c7      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e32:	4b3b      	ldr	r3, [pc, #236]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4937      	ldr	r1, [pc, #220]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e46:	e03a      	b.n	8002ebe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d020      	beq.n	8002e92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e50:	4b34      	ldr	r3, [pc, #208]	; (8002f24 <HAL_RCC_OscConfig+0x244>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e56:	f7ff f917 	bl	8002088 <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e5c:	e008      	b.n	8002e70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e5e:	f7ff f913 	bl	8002088 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e1a8      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e70:	4b2b      	ldr	r3, [pc, #172]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0f0      	beq.n	8002e5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e7c:	4b28      	ldr	r3, [pc, #160]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	4925      	ldr	r1, [pc, #148]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	600b      	str	r3, [r1, #0]
 8002e90:	e015      	b.n	8002ebe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e92:	4b24      	ldr	r3, [pc, #144]	; (8002f24 <HAL_RCC_OscConfig+0x244>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e98:	f7ff f8f6 	bl	8002088 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ea0:	f7ff f8f2 	bl	8002088 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e187      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eb2:	4b1b      	ldr	r3, [pc, #108]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d036      	beq.n	8002f38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d016      	beq.n	8002f00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ed2:	4b15      	ldr	r3, [pc, #84]	; (8002f28 <HAL_RCC_OscConfig+0x248>)
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed8:	f7ff f8d6 	bl	8002088 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ee0:	f7ff f8d2 	bl	8002088 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e167      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ef2:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f0      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x200>
 8002efe:	e01b      	b.n	8002f38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f00:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <HAL_RCC_OscConfig+0x248>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f06:	f7ff f8bf 	bl	8002088 <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f0c:	e00e      	b.n	8002f2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f0e:	f7ff f8bb 	bl	8002088 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d907      	bls.n	8002f2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e150      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
 8002f20:	40023800 	.word	0x40023800
 8002f24:	42470000 	.word	0x42470000
 8002f28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f2c:	4b88      	ldr	r3, [pc, #544]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1ea      	bne.n	8002f0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 8097 	beq.w	8003074 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f46:	2300      	movs	r3, #0
 8002f48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f4a:	4b81      	ldr	r3, [pc, #516]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10f      	bne.n	8002f76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f56:	2300      	movs	r3, #0
 8002f58:	60bb      	str	r3, [r7, #8]
 8002f5a:	4b7d      	ldr	r3, [pc, #500]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	4a7c      	ldr	r2, [pc, #496]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f64:	6413      	str	r3, [r2, #64]	; 0x40
 8002f66:	4b7a      	ldr	r3, [pc, #488]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6e:	60bb      	str	r3, [r7, #8]
 8002f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f72:	2301      	movs	r3, #1
 8002f74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f76:	4b77      	ldr	r3, [pc, #476]	; (8003154 <HAL_RCC_OscConfig+0x474>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d118      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f82:	4b74      	ldr	r3, [pc, #464]	; (8003154 <HAL_RCC_OscConfig+0x474>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a73      	ldr	r2, [pc, #460]	; (8003154 <HAL_RCC_OscConfig+0x474>)
 8002f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f8e:	f7ff f87b 	bl	8002088 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f96:	f7ff f877 	bl	8002088 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e10c      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa8:	4b6a      	ldr	r3, [pc, #424]	; (8003154 <HAL_RCC_OscConfig+0x474>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0f0      	beq.n	8002f96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d106      	bne.n	8002fca <HAL_RCC_OscConfig+0x2ea>
 8002fbc:	4b64      	ldr	r3, [pc, #400]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc0:	4a63      	ldr	r2, [pc, #396]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002fc2:	f043 0301 	orr.w	r3, r3, #1
 8002fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc8:	e01c      	b.n	8003004 <HAL_RCC_OscConfig+0x324>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	2b05      	cmp	r3, #5
 8002fd0:	d10c      	bne.n	8002fec <HAL_RCC_OscConfig+0x30c>
 8002fd2:	4b5f      	ldr	r3, [pc, #380]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd6:	4a5e      	ldr	r2, [pc, #376]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002fd8:	f043 0304 	orr.w	r3, r3, #4
 8002fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8002fde:	4b5c      	ldr	r3, [pc, #368]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe2:	4a5b      	ldr	r2, [pc, #364]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fea:	e00b      	b.n	8003004 <HAL_RCC_OscConfig+0x324>
 8002fec:	4b58      	ldr	r3, [pc, #352]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff0:	4a57      	ldr	r2, [pc, #348]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002ff2:	f023 0301 	bic.w	r3, r3, #1
 8002ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff8:	4b55      	ldr	r3, [pc, #340]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffc:	4a54      	ldr	r2, [pc, #336]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002ffe:	f023 0304 	bic.w	r3, r3, #4
 8003002:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d015      	beq.n	8003038 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300c:	f7ff f83c 	bl	8002088 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003012:	e00a      	b.n	800302a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003014:	f7ff f838 	bl	8002088 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003022:	4293      	cmp	r3, r2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e0cb      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800302a:	4b49      	ldr	r3, [pc, #292]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 800302c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0ee      	beq.n	8003014 <HAL_RCC_OscConfig+0x334>
 8003036:	e014      	b.n	8003062 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003038:	f7ff f826 	bl	8002088 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800303e:	e00a      	b.n	8003056 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003040:	f7ff f822 	bl	8002088 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	f241 3288 	movw	r2, #5000	; 0x1388
 800304e:	4293      	cmp	r3, r2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e0b5      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003056:	4b3e      	ldr	r3, [pc, #248]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8003058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1ee      	bne.n	8003040 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003062:	7dfb      	ldrb	r3, [r7, #23]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d105      	bne.n	8003074 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003068:	4b39      	ldr	r3, [pc, #228]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	4a38      	ldr	r2, [pc, #224]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 800306e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003072:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 80a1 	beq.w	80031c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800307e:	4b34      	ldr	r3, [pc, #208]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 030c 	and.w	r3, r3, #12
 8003086:	2b08      	cmp	r3, #8
 8003088:	d05c      	beq.n	8003144 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	2b02      	cmp	r3, #2
 8003090:	d141      	bne.n	8003116 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003092:	4b31      	ldr	r3, [pc, #196]	; (8003158 <HAL_RCC_OscConfig+0x478>)
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003098:	f7fe fff6 	bl	8002088 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a0:	f7fe fff2 	bl	8002088 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e087      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b2:	4b27      	ldr	r3, [pc, #156]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69da      	ldr	r2, [r3, #28]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	019b      	lsls	r3, r3, #6
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d4:	085b      	lsrs	r3, r3, #1
 80030d6:	3b01      	subs	r3, #1
 80030d8:	041b      	lsls	r3, r3, #16
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e0:	061b      	lsls	r3, r3, #24
 80030e2:	491b      	ldr	r1, [pc, #108]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030e8:	4b1b      	ldr	r3, [pc, #108]	; (8003158 <HAL_RCC_OscConfig+0x478>)
 80030ea:	2201      	movs	r2, #1
 80030ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ee:	f7fe ffcb 	bl	8002088 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f6:	f7fe ffc7 	bl	8002088 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e05c      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003108:	4b11      	ldr	r3, [pc, #68]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0f0      	beq.n	80030f6 <HAL_RCC_OscConfig+0x416>
 8003114:	e054      	b.n	80031c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003116:	4b10      	ldr	r3, [pc, #64]	; (8003158 <HAL_RCC_OscConfig+0x478>)
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311c:	f7fe ffb4 	bl	8002088 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003124:	f7fe ffb0 	bl	8002088 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e045      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003136:	4b06      	ldr	r3, [pc, #24]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1f0      	bne.n	8003124 <HAL_RCC_OscConfig+0x444>
 8003142:	e03d      	b.n	80031c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d107      	bne.n	800315c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e038      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
 8003150:	40023800 	.word	0x40023800
 8003154:	40007000 	.word	0x40007000
 8003158:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800315c:	4b1b      	ldr	r3, [pc, #108]	; (80031cc <HAL_RCC_OscConfig+0x4ec>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d028      	beq.n	80031bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003174:	429a      	cmp	r2, r3
 8003176:	d121      	bne.n	80031bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003182:	429a      	cmp	r2, r3
 8003184:	d11a      	bne.n	80031bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800318c:	4013      	ands	r3, r2
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003192:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003194:	4293      	cmp	r3, r2
 8003196:	d111      	bne.n	80031bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a2:	085b      	lsrs	r3, r3, #1
 80031a4:	3b01      	subs	r3, #1
 80031a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d107      	bne.n	80031bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d001      	beq.n	80031c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e000      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40023800 	.word	0x40023800

080031d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e0cc      	b.n	800337e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031e4:	4b68      	ldr	r3, [pc, #416]	; (8003388 <HAL_RCC_ClockConfig+0x1b8>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d90c      	bls.n	800320c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f2:	4b65      	ldr	r3, [pc, #404]	; (8003388 <HAL_RCC_ClockConfig+0x1b8>)
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fa:	4b63      	ldr	r3, [pc, #396]	; (8003388 <HAL_RCC_ClockConfig+0x1b8>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d001      	beq.n	800320c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e0b8      	b.n	800337e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d020      	beq.n	800325a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	d005      	beq.n	8003230 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003224:	4b59      	ldr	r3, [pc, #356]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	4a58      	ldr	r2, [pc, #352]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 800322a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800322e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0308 	and.w	r3, r3, #8
 8003238:	2b00      	cmp	r3, #0
 800323a:	d005      	beq.n	8003248 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800323c:	4b53      	ldr	r3, [pc, #332]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	4a52      	ldr	r2, [pc, #328]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003246:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003248:	4b50      	ldr	r3, [pc, #320]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	494d      	ldr	r1, [pc, #308]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 8003256:	4313      	orrs	r3, r2
 8003258:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d044      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d107      	bne.n	800327e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326e:	4b47      	ldr	r3, [pc, #284]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d119      	bne.n	80032ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e07f      	b.n	800337e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b02      	cmp	r3, #2
 8003284:	d003      	beq.n	800328e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800328a:	2b03      	cmp	r3, #3
 800328c:	d107      	bne.n	800329e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800328e:	4b3f      	ldr	r3, [pc, #252]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d109      	bne.n	80032ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e06f      	b.n	800337e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329e:	4b3b      	ldr	r3, [pc, #236]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e067      	b.n	800337e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ae:	4b37      	ldr	r3, [pc, #220]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f023 0203 	bic.w	r2, r3, #3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	4934      	ldr	r1, [pc, #208]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032c0:	f7fe fee2 	bl	8002088 <HAL_GetTick>
 80032c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c6:	e00a      	b.n	80032de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c8:	f7fe fede 	bl	8002088 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e04f      	b.n	800337e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032de:	4b2b      	ldr	r3, [pc, #172]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 020c 	and.w	r2, r3, #12
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d1eb      	bne.n	80032c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032f0:	4b25      	ldr	r3, [pc, #148]	; (8003388 <HAL_RCC_ClockConfig+0x1b8>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d20c      	bcs.n	8003318 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fe:	4b22      	ldr	r3, [pc, #136]	; (8003388 <HAL_RCC_ClockConfig+0x1b8>)
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003306:	4b20      	ldr	r3, [pc, #128]	; (8003388 <HAL_RCC_ClockConfig+0x1b8>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	429a      	cmp	r2, r3
 8003312:	d001      	beq.n	8003318 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e032      	b.n	800337e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d008      	beq.n	8003336 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003324:	4b19      	ldr	r3, [pc, #100]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	4916      	ldr	r1, [pc, #88]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 8003332:	4313      	orrs	r3, r2
 8003334:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d009      	beq.n	8003356 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003342:	4b12      	ldr	r3, [pc, #72]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	490e      	ldr	r1, [pc, #56]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 8003352:	4313      	orrs	r3, r2
 8003354:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003356:	f000 f821 	bl	800339c <HAL_RCC_GetSysClockFreq>
 800335a:	4602      	mov	r2, r0
 800335c:	4b0b      	ldr	r3, [pc, #44]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	091b      	lsrs	r3, r3, #4
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	490a      	ldr	r1, [pc, #40]	; (8003390 <HAL_RCC_ClockConfig+0x1c0>)
 8003368:	5ccb      	ldrb	r3, [r1, r3]
 800336a:	fa22 f303 	lsr.w	r3, r2, r3
 800336e:	4a09      	ldr	r2, [pc, #36]	; (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 8003370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003372:	4b09      	ldr	r3, [pc, #36]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f7fe fe42 	bl	8002000 <HAL_InitTick>

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40023c00 	.word	0x40023c00
 800338c:	40023800 	.word	0x40023800
 8003390:	080053f4 	.word	0x080053f4
 8003394:	2000004c 	.word	0x2000004c
 8003398:	20000050 	.word	0x20000050

0800339c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800339c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033a0:	b094      	sub	sp, #80	; 0x50
 80033a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	647b      	str	r3, [r7, #68]	; 0x44
 80033a8:	2300      	movs	r3, #0
 80033aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033ac:	2300      	movs	r3, #0
 80033ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033b4:	4b79      	ldr	r3, [pc, #484]	; (800359c <HAL_RCC_GetSysClockFreq+0x200>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f003 030c 	and.w	r3, r3, #12
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d00d      	beq.n	80033dc <HAL_RCC_GetSysClockFreq+0x40>
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	f200 80e1 	bhi.w	8003588 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <HAL_RCC_GetSysClockFreq+0x34>
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d003      	beq.n	80033d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80033ce:	e0db      	b.n	8003588 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033d0:	4b73      	ldr	r3, [pc, #460]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80033d2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80033d4:	e0db      	b.n	800358e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033d6:	4b73      	ldr	r3, [pc, #460]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80033d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033da:	e0d8      	b.n	800358e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033dc:	4b6f      	ldr	r3, [pc, #444]	; (800359c <HAL_RCC_GetSysClockFreq+0x200>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033e4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033e6:	4b6d      	ldr	r3, [pc, #436]	; (800359c <HAL_RCC_GetSysClockFreq+0x200>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d063      	beq.n	80034ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033f2:	4b6a      	ldr	r3, [pc, #424]	; (800359c <HAL_RCC_GetSysClockFreq+0x200>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	099b      	lsrs	r3, r3, #6
 80033f8:	2200      	movs	r2, #0
 80033fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80033fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003404:	633b      	str	r3, [r7, #48]	; 0x30
 8003406:	2300      	movs	r3, #0
 8003408:	637b      	str	r3, [r7, #52]	; 0x34
 800340a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800340e:	4622      	mov	r2, r4
 8003410:	462b      	mov	r3, r5
 8003412:	f04f 0000 	mov.w	r0, #0
 8003416:	f04f 0100 	mov.w	r1, #0
 800341a:	0159      	lsls	r1, r3, #5
 800341c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003420:	0150      	lsls	r0, r2, #5
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	4621      	mov	r1, r4
 8003428:	1a51      	subs	r1, r2, r1
 800342a:	6139      	str	r1, [r7, #16]
 800342c:	4629      	mov	r1, r5
 800342e:	eb63 0301 	sbc.w	r3, r3, r1
 8003432:	617b      	str	r3, [r7, #20]
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	f04f 0300 	mov.w	r3, #0
 800343c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003440:	4659      	mov	r1, fp
 8003442:	018b      	lsls	r3, r1, #6
 8003444:	4651      	mov	r1, sl
 8003446:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800344a:	4651      	mov	r1, sl
 800344c:	018a      	lsls	r2, r1, #6
 800344e:	4651      	mov	r1, sl
 8003450:	ebb2 0801 	subs.w	r8, r2, r1
 8003454:	4659      	mov	r1, fp
 8003456:	eb63 0901 	sbc.w	r9, r3, r1
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	f04f 0300 	mov.w	r3, #0
 8003462:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003466:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800346a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800346e:	4690      	mov	r8, r2
 8003470:	4699      	mov	r9, r3
 8003472:	4623      	mov	r3, r4
 8003474:	eb18 0303 	adds.w	r3, r8, r3
 8003478:	60bb      	str	r3, [r7, #8]
 800347a:	462b      	mov	r3, r5
 800347c:	eb49 0303 	adc.w	r3, r9, r3
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	f04f 0300 	mov.w	r3, #0
 800348a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800348e:	4629      	mov	r1, r5
 8003490:	024b      	lsls	r3, r1, #9
 8003492:	4621      	mov	r1, r4
 8003494:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003498:	4621      	mov	r1, r4
 800349a:	024a      	lsls	r2, r1, #9
 800349c:	4610      	mov	r0, r2
 800349e:	4619      	mov	r1, r3
 80034a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034a2:	2200      	movs	r2, #0
 80034a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80034a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034ac:	f7fd f9f2 	bl	8000894 <__aeabi_uldivmod>
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	4613      	mov	r3, r2
 80034b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034b8:	e058      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ba:	4b38      	ldr	r3, [pc, #224]	; (800359c <HAL_RCC_GetSysClockFreq+0x200>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	099b      	lsrs	r3, r3, #6
 80034c0:	2200      	movs	r2, #0
 80034c2:	4618      	mov	r0, r3
 80034c4:	4611      	mov	r1, r2
 80034c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034ca:	623b      	str	r3, [r7, #32]
 80034cc:	2300      	movs	r3, #0
 80034ce:	627b      	str	r3, [r7, #36]	; 0x24
 80034d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034d4:	4642      	mov	r2, r8
 80034d6:	464b      	mov	r3, r9
 80034d8:	f04f 0000 	mov.w	r0, #0
 80034dc:	f04f 0100 	mov.w	r1, #0
 80034e0:	0159      	lsls	r1, r3, #5
 80034e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034e6:	0150      	lsls	r0, r2, #5
 80034e8:	4602      	mov	r2, r0
 80034ea:	460b      	mov	r3, r1
 80034ec:	4641      	mov	r1, r8
 80034ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80034f2:	4649      	mov	r1, r9
 80034f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	f04f 0300 	mov.w	r3, #0
 8003500:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003504:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003508:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800350c:	ebb2 040a 	subs.w	r4, r2, sl
 8003510:	eb63 050b 	sbc.w	r5, r3, fp
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	00eb      	lsls	r3, r5, #3
 800351e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003522:	00e2      	lsls	r2, r4, #3
 8003524:	4614      	mov	r4, r2
 8003526:	461d      	mov	r5, r3
 8003528:	4643      	mov	r3, r8
 800352a:	18e3      	adds	r3, r4, r3
 800352c:	603b      	str	r3, [r7, #0]
 800352e:	464b      	mov	r3, r9
 8003530:	eb45 0303 	adc.w	r3, r5, r3
 8003534:	607b      	str	r3, [r7, #4]
 8003536:	f04f 0200 	mov.w	r2, #0
 800353a:	f04f 0300 	mov.w	r3, #0
 800353e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003542:	4629      	mov	r1, r5
 8003544:	028b      	lsls	r3, r1, #10
 8003546:	4621      	mov	r1, r4
 8003548:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800354c:	4621      	mov	r1, r4
 800354e:	028a      	lsls	r2, r1, #10
 8003550:	4610      	mov	r0, r2
 8003552:	4619      	mov	r1, r3
 8003554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003556:	2200      	movs	r2, #0
 8003558:	61bb      	str	r3, [r7, #24]
 800355a:	61fa      	str	r2, [r7, #28]
 800355c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003560:	f7fd f998 	bl	8000894 <__aeabi_uldivmod>
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	4613      	mov	r3, r2
 800356a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800356c:	4b0b      	ldr	r3, [pc, #44]	; (800359c <HAL_RCC_GetSysClockFreq+0x200>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	0c1b      	lsrs	r3, r3, #16
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	3301      	adds	r3, #1
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800357c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800357e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003580:	fbb2 f3f3 	udiv	r3, r2, r3
 8003584:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003586:	e002      	b.n	800358e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003588:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800358a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800358c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800358e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003590:	4618      	mov	r0, r3
 8003592:	3750      	adds	r7, #80	; 0x50
 8003594:	46bd      	mov	sp, r7
 8003596:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800359a:	bf00      	nop
 800359c:	40023800 	.word	0x40023800
 80035a0:	00f42400 	.word	0x00f42400
 80035a4:	007a1200 	.word	0x007a1200

080035a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035ac:	4b03      	ldr	r3, [pc, #12]	; (80035bc <HAL_RCC_GetHCLKFreq+0x14>)
 80035ae:	681b      	ldr	r3, [r3, #0]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	2000004c 	.word	0x2000004c

080035c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035c4:	f7ff fff0 	bl	80035a8 <HAL_RCC_GetHCLKFreq>
 80035c8:	4602      	mov	r2, r0
 80035ca:	4b05      	ldr	r3, [pc, #20]	; (80035e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	0a9b      	lsrs	r3, r3, #10
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	4903      	ldr	r1, [pc, #12]	; (80035e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035d6:	5ccb      	ldrb	r3, [r1, r3]
 80035d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035dc:	4618      	mov	r0, r3
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40023800 	.word	0x40023800
 80035e4:	08005404 	.word	0x08005404

080035e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035ec:	f7ff ffdc 	bl	80035a8 <HAL_RCC_GetHCLKFreq>
 80035f0:	4602      	mov	r2, r0
 80035f2:	4b05      	ldr	r3, [pc, #20]	; (8003608 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	0b5b      	lsrs	r3, r3, #13
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	4903      	ldr	r1, [pc, #12]	; (800360c <HAL_RCC_GetPCLK2Freq+0x24>)
 80035fe:	5ccb      	ldrb	r3, [r1, r3]
 8003600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003604:	4618      	mov	r0, r3
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40023800 	.word	0x40023800
 800360c:	08005404 	.word	0x08005404

08003610 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e041      	b.n	80036a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d106      	bne.n	800363c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7fe fb2e 	bl	8001c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2202      	movs	r2, #2
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3304      	adds	r3, #4
 800364c:	4619      	mov	r1, r3
 800364e:	4610      	mov	r0, r2
 8003650:	f000 fd7e 	bl	8004150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d001      	beq.n	80036c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e044      	b.n	8003752 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2202      	movs	r2, #2
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a1e      	ldr	r2, [pc, #120]	; (8003760 <HAL_TIM_Base_Start_IT+0xb0>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d018      	beq.n	800371c <HAL_TIM_Base_Start_IT+0x6c>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f2:	d013      	beq.n	800371c <HAL_TIM_Base_Start_IT+0x6c>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a1a      	ldr	r2, [pc, #104]	; (8003764 <HAL_TIM_Base_Start_IT+0xb4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d00e      	beq.n	800371c <HAL_TIM_Base_Start_IT+0x6c>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a19      	ldr	r2, [pc, #100]	; (8003768 <HAL_TIM_Base_Start_IT+0xb8>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d009      	beq.n	800371c <HAL_TIM_Base_Start_IT+0x6c>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a17      	ldr	r2, [pc, #92]	; (800376c <HAL_TIM_Base_Start_IT+0xbc>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d004      	beq.n	800371c <HAL_TIM_Base_Start_IT+0x6c>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a16      	ldr	r2, [pc, #88]	; (8003770 <HAL_TIM_Base_Start_IT+0xc0>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d111      	bne.n	8003740 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2b06      	cmp	r3, #6
 800372c:	d010      	beq.n	8003750 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f042 0201 	orr.w	r2, r2, #1
 800373c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800373e:	e007      	b.n	8003750 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	40010000 	.word	0x40010000
 8003764:	40000400 	.word	0x40000400
 8003768:	40000800 	.word	0x40000800
 800376c:	40000c00 	.word	0x40000c00
 8003770:	40014000 	.word	0x40014000

08003774 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e041      	b.n	800380a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d106      	bne.n	80037a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fe f952 	bl	8001a44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2202      	movs	r2, #2
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3304      	adds	r3, #4
 80037b0:	4619      	mov	r1, r3
 80037b2:	4610      	mov	r0, r2
 80037b4:	f000 fccc 	bl	8004150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
	...

08003814 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d109      	bne.n	8003838 <HAL_TIM_PWM_Start+0x24>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b01      	cmp	r3, #1
 800382e:	bf14      	ite	ne
 8003830:	2301      	movne	r3, #1
 8003832:	2300      	moveq	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	e022      	b.n	800387e <HAL_TIM_PWM_Start+0x6a>
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	2b04      	cmp	r3, #4
 800383c:	d109      	bne.n	8003852 <HAL_TIM_PWM_Start+0x3e>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b01      	cmp	r3, #1
 8003848:	bf14      	ite	ne
 800384a:	2301      	movne	r3, #1
 800384c:	2300      	moveq	r3, #0
 800384e:	b2db      	uxtb	r3, r3
 8003850:	e015      	b.n	800387e <HAL_TIM_PWM_Start+0x6a>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b08      	cmp	r3, #8
 8003856:	d109      	bne.n	800386c <HAL_TIM_PWM_Start+0x58>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b01      	cmp	r3, #1
 8003862:	bf14      	ite	ne
 8003864:	2301      	movne	r3, #1
 8003866:	2300      	moveq	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	e008      	b.n	800387e <HAL_TIM_PWM_Start+0x6a>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b01      	cmp	r3, #1
 8003876:	bf14      	ite	ne
 8003878:	2301      	movne	r3, #1
 800387a:	2300      	moveq	r3, #0
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e068      	b.n	8003958 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d104      	bne.n	8003896 <HAL_TIM_PWM_Start+0x82>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2202      	movs	r2, #2
 8003890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003894:	e013      	b.n	80038be <HAL_TIM_PWM_Start+0xaa>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	2b04      	cmp	r3, #4
 800389a:	d104      	bne.n	80038a6 <HAL_TIM_PWM_Start+0x92>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2202      	movs	r2, #2
 80038a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038a4:	e00b      	b.n	80038be <HAL_TIM_PWM_Start+0xaa>
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d104      	bne.n	80038b6 <HAL_TIM_PWM_Start+0xa2>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2202      	movs	r2, #2
 80038b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038b4:	e003      	b.n	80038be <HAL_TIM_PWM_Start+0xaa>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2202      	movs	r2, #2
 80038ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2201      	movs	r2, #1
 80038c4:	6839      	ldr	r1, [r7, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 fee8 	bl	800469c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a23      	ldr	r2, [pc, #140]	; (8003960 <HAL_TIM_PWM_Start+0x14c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d107      	bne.n	80038e6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a1d      	ldr	r2, [pc, #116]	; (8003960 <HAL_TIM_PWM_Start+0x14c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d018      	beq.n	8003922 <HAL_TIM_PWM_Start+0x10e>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f8:	d013      	beq.n	8003922 <HAL_TIM_PWM_Start+0x10e>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a19      	ldr	r2, [pc, #100]	; (8003964 <HAL_TIM_PWM_Start+0x150>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d00e      	beq.n	8003922 <HAL_TIM_PWM_Start+0x10e>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a17      	ldr	r2, [pc, #92]	; (8003968 <HAL_TIM_PWM_Start+0x154>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d009      	beq.n	8003922 <HAL_TIM_PWM_Start+0x10e>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a16      	ldr	r2, [pc, #88]	; (800396c <HAL_TIM_PWM_Start+0x158>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d004      	beq.n	8003922 <HAL_TIM_PWM_Start+0x10e>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a14      	ldr	r2, [pc, #80]	; (8003970 <HAL_TIM_PWM_Start+0x15c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d111      	bne.n	8003946 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2b06      	cmp	r3, #6
 8003932:	d010      	beq.n	8003956 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0201 	orr.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003944:	e007      	b.n	8003956 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f042 0201 	orr.w	r2, r2, #1
 8003954:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40010000 	.word	0x40010000
 8003964:	40000400 	.word	0x40000400
 8003968:	40000800 	.word	0x40000800
 800396c:	40000c00 	.word	0x40000c00
 8003970:	40014000 	.word	0x40014000

08003974 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e097      	b.n	8003ab8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	d106      	bne.n	80039a2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f7fe f879 	bl	8001a94 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2202      	movs	r2, #2
 80039a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6812      	ldr	r2, [r2, #0]
 80039b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039b8:	f023 0307 	bic.w	r3, r3, #7
 80039bc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	3304      	adds	r3, #4
 80039c6:	4619      	mov	r1, r3
 80039c8:	4610      	mov	r0, r2
 80039ca:	f000 fbc1 	bl	8004150 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039f6:	f023 0303 	bic.w	r3, r3, #3
 80039fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	021b      	lsls	r3, r3, #8
 8003a06:	4313      	orrs	r3, r2
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003a14:	f023 030c 	bic.w	r3, r3, #12
 8003a18:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	021b      	lsls	r3, r3, #8
 8003a30:	4313      	orrs	r3, r2
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	011a      	lsls	r2, r3, #4
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	031b      	lsls	r3, r3, #12
 8003a44:	4313      	orrs	r3, r2
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003a52:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003a5a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	4313      	orrs	r3, r2
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3718      	adds	r7, #24
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ad0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ad8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ae0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003ae8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d110      	bne.n	8003b12 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d102      	bne.n	8003afc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003af6:	7b7b      	ldrb	r3, [r7, #13]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d001      	beq.n	8003b00 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e069      	b.n	8003bd4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2202      	movs	r2, #2
 8003b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b10:	e031      	b.n	8003b76 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d110      	bne.n	8003b3a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b18:	7bbb      	ldrb	r3, [r7, #14]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d102      	bne.n	8003b24 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b1e:	7b3b      	ldrb	r3, [r7, #12]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d001      	beq.n	8003b28 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e055      	b.n	8003bd4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b38:	e01d      	b.n	8003b76 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b3a:	7bfb      	ldrb	r3, [r7, #15]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d108      	bne.n	8003b52 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b40:	7bbb      	ldrb	r3, [r7, #14]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d105      	bne.n	8003b52 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b46:	7b7b      	ldrb	r3, [r7, #13]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d102      	bne.n	8003b52 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b4c:	7b3b      	ldrb	r3, [r7, #12]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d001      	beq.n	8003b56 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e03e      	b.n	8003bd4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2202      	movs	r2, #2
 8003b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2202      	movs	r2, #2
 8003b62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2202      	movs	r2, #2
 8003b6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2202      	movs	r2, #2
 8003b72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <HAL_TIM_Encoder_Start+0xc4>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d008      	beq.n	8003b94 <HAL_TIM_Encoder_Start+0xd4>
 8003b82:	e00f      	b.n	8003ba4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 fd85 	bl	800469c <TIM_CCxChannelCmd>
      break;
 8003b92:	e016      	b.n	8003bc2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	2104      	movs	r1, #4
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 fd7d 	bl	800469c <TIM_CCxChannelCmd>
      break;
 8003ba2:	e00e      	b.n	8003bc2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	2100      	movs	r1, #0
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 fd75 	bl	800469c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	2104      	movs	r1, #4
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 fd6e 	bl	800469c <TIM_CCxChannelCmd>
      break;
 8003bc0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f042 0201 	orr.w	r2, r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d122      	bne.n	8003c38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d11b      	bne.n	8003c38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f06f 0202 	mvn.w	r2, #2
 8003c08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 fa77 	bl	8004112 <HAL_TIM_IC_CaptureCallback>
 8003c24:	e005      	b.n	8003c32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 fa69 	bl	80040fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 fa7a 	bl	8004126 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	f003 0304 	and.w	r3, r3, #4
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d122      	bne.n	8003c8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f003 0304 	and.w	r3, r3, #4
 8003c50:	2b04      	cmp	r3, #4
 8003c52:	d11b      	bne.n	8003c8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f06f 0204 	mvn.w	r2, #4
 8003c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2202      	movs	r2, #2
 8003c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 fa4d 	bl	8004112 <HAL_TIM_IC_CaptureCallback>
 8003c78:	e005      	b.n	8003c86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 fa3f 	bl	80040fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 fa50 	bl	8004126 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b08      	cmp	r3, #8
 8003c98:	d122      	bne.n	8003ce0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d11b      	bne.n	8003ce0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f06f 0208 	mvn.w	r2, #8
 8003cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2204      	movs	r2, #4
 8003cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	f003 0303 	and.w	r3, r3, #3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 fa23 	bl	8004112 <HAL_TIM_IC_CaptureCallback>
 8003ccc:	e005      	b.n	8003cda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 fa15 	bl	80040fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 fa26 	bl	8004126 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	f003 0310 	and.w	r3, r3, #16
 8003cea:	2b10      	cmp	r3, #16
 8003cec:	d122      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f003 0310 	and.w	r3, r3, #16
 8003cf8:	2b10      	cmp	r3, #16
 8003cfa:	d11b      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f06f 0210 	mvn.w	r2, #16
 8003d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2208      	movs	r2, #8
 8003d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f9f9 	bl	8004112 <HAL_TIM_IC_CaptureCallback>
 8003d20:	e005      	b.n	8003d2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f9eb 	bl	80040fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f9fc 	bl	8004126 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d10e      	bne.n	8003d60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d107      	bne.n	8003d60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f06f 0201 	mvn.w	r2, #1
 8003d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7fc ff32 	bl	8000bc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d6a:	2b80      	cmp	r3, #128	; 0x80
 8003d6c:	d10e      	bne.n	8003d8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d78:	2b80      	cmp	r3, #128	; 0x80
 8003d7a:	d107      	bne.n	8003d8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 fd78 	bl	800487c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d96:	2b40      	cmp	r3, #64	; 0x40
 8003d98:	d10e      	bne.n	8003db8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da4:	2b40      	cmp	r3, #64	; 0x40
 8003da6:	d107      	bne.n	8003db8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f9c1 	bl	800413a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	f003 0320 	and.w	r3, r3, #32
 8003dc2:	2b20      	cmp	r3, #32
 8003dc4:	d10e      	bne.n	8003de4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f003 0320 	and.w	r3, r3, #32
 8003dd0:	2b20      	cmp	r3, #32
 8003dd2:	d107      	bne.n	8003de4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f06f 0220 	mvn.w	r2, #32
 8003ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 fd42 	bl	8004868 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003de4:	bf00      	nop
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d101      	bne.n	8003e0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e06:	2302      	movs	r3, #2
 8003e08:	e0ae      	b.n	8003f68 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b0c      	cmp	r3, #12
 8003e16:	f200 809f 	bhi.w	8003f58 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e1a:	a201      	add	r2, pc, #4	; (adr r2, 8003e20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e20:	08003e55 	.word	0x08003e55
 8003e24:	08003f59 	.word	0x08003f59
 8003e28:	08003f59 	.word	0x08003f59
 8003e2c:	08003f59 	.word	0x08003f59
 8003e30:	08003e95 	.word	0x08003e95
 8003e34:	08003f59 	.word	0x08003f59
 8003e38:	08003f59 	.word	0x08003f59
 8003e3c:	08003f59 	.word	0x08003f59
 8003e40:	08003ed7 	.word	0x08003ed7
 8003e44:	08003f59 	.word	0x08003f59
 8003e48:	08003f59 	.word	0x08003f59
 8003e4c:	08003f59 	.word	0x08003f59
 8003e50:	08003f17 	.word	0x08003f17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68b9      	ldr	r1, [r7, #8]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 f9f8 	bl	8004250 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699a      	ldr	r2, [r3, #24]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0208 	orr.w	r2, r2, #8
 8003e6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	699a      	ldr	r2, [r3, #24]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0204 	bic.w	r2, r2, #4
 8003e7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6999      	ldr	r1, [r3, #24]
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	691a      	ldr	r2, [r3, #16]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	619a      	str	r2, [r3, #24]
      break;
 8003e92:	e064      	b.n	8003f5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68b9      	ldr	r1, [r7, #8]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 fa3e 	bl	800431c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699a      	ldr	r2, [r3, #24]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699a      	ldr	r2, [r3, #24]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ebe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6999      	ldr	r1, [r3, #24]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	021a      	lsls	r2, r3, #8
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	619a      	str	r2, [r3, #24]
      break;
 8003ed4:	e043      	b.n	8003f5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68b9      	ldr	r1, [r7, #8]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 fa89 	bl	80043f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	69da      	ldr	r2, [r3, #28]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f042 0208 	orr.w	r2, r2, #8
 8003ef0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	69da      	ldr	r2, [r3, #28]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0204 	bic.w	r2, r2, #4
 8003f00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	69d9      	ldr	r1, [r3, #28]
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	691a      	ldr	r2, [r3, #16]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	61da      	str	r2, [r3, #28]
      break;
 8003f14:	e023      	b.n	8003f5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68b9      	ldr	r1, [r7, #8]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 fad3 	bl	80044c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	69da      	ldr	r2, [r3, #28]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	69da      	ldr	r2, [r3, #28]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	69d9      	ldr	r1, [r3, #28]
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	021a      	lsls	r2, r3, #8
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	61da      	str	r2, [r3, #28]
      break;
 8003f56:	e002      	b.n	8003f5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d101      	bne.n	8003f8c <HAL_TIM_ConfigClockSource+0x1c>
 8003f88:	2302      	movs	r3, #2
 8003f8a:	e0b4      	b.n	80040f6 <HAL_TIM_ConfigClockSource+0x186>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2202      	movs	r2, #2
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003faa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc4:	d03e      	beq.n	8004044 <HAL_TIM_ConfigClockSource+0xd4>
 8003fc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fca:	f200 8087 	bhi.w	80040dc <HAL_TIM_ConfigClockSource+0x16c>
 8003fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd2:	f000 8086 	beq.w	80040e2 <HAL_TIM_ConfigClockSource+0x172>
 8003fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fda:	d87f      	bhi.n	80040dc <HAL_TIM_ConfigClockSource+0x16c>
 8003fdc:	2b70      	cmp	r3, #112	; 0x70
 8003fde:	d01a      	beq.n	8004016 <HAL_TIM_ConfigClockSource+0xa6>
 8003fe0:	2b70      	cmp	r3, #112	; 0x70
 8003fe2:	d87b      	bhi.n	80040dc <HAL_TIM_ConfigClockSource+0x16c>
 8003fe4:	2b60      	cmp	r3, #96	; 0x60
 8003fe6:	d050      	beq.n	800408a <HAL_TIM_ConfigClockSource+0x11a>
 8003fe8:	2b60      	cmp	r3, #96	; 0x60
 8003fea:	d877      	bhi.n	80040dc <HAL_TIM_ConfigClockSource+0x16c>
 8003fec:	2b50      	cmp	r3, #80	; 0x50
 8003fee:	d03c      	beq.n	800406a <HAL_TIM_ConfigClockSource+0xfa>
 8003ff0:	2b50      	cmp	r3, #80	; 0x50
 8003ff2:	d873      	bhi.n	80040dc <HAL_TIM_ConfigClockSource+0x16c>
 8003ff4:	2b40      	cmp	r3, #64	; 0x40
 8003ff6:	d058      	beq.n	80040aa <HAL_TIM_ConfigClockSource+0x13a>
 8003ff8:	2b40      	cmp	r3, #64	; 0x40
 8003ffa:	d86f      	bhi.n	80040dc <HAL_TIM_ConfigClockSource+0x16c>
 8003ffc:	2b30      	cmp	r3, #48	; 0x30
 8003ffe:	d064      	beq.n	80040ca <HAL_TIM_ConfigClockSource+0x15a>
 8004000:	2b30      	cmp	r3, #48	; 0x30
 8004002:	d86b      	bhi.n	80040dc <HAL_TIM_ConfigClockSource+0x16c>
 8004004:	2b20      	cmp	r3, #32
 8004006:	d060      	beq.n	80040ca <HAL_TIM_ConfigClockSource+0x15a>
 8004008:	2b20      	cmp	r3, #32
 800400a:	d867      	bhi.n	80040dc <HAL_TIM_ConfigClockSource+0x16c>
 800400c:	2b00      	cmp	r3, #0
 800400e:	d05c      	beq.n	80040ca <HAL_TIM_ConfigClockSource+0x15a>
 8004010:	2b10      	cmp	r3, #16
 8004012:	d05a      	beq.n	80040ca <HAL_TIM_ConfigClockSource+0x15a>
 8004014:	e062      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6818      	ldr	r0, [r3, #0]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	6899      	ldr	r1, [r3, #8]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f000 fb19 	bl	800465c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004038:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	609a      	str	r2, [r3, #8]
      break;
 8004042:	e04f      	b.n	80040e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6818      	ldr	r0, [r3, #0]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	6899      	ldr	r1, [r3, #8]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	f000 fb02 	bl	800465c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689a      	ldr	r2, [r3, #8]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004066:	609a      	str	r2, [r3, #8]
      break;
 8004068:	e03c      	b.n	80040e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6818      	ldr	r0, [r3, #0]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	6859      	ldr	r1, [r3, #4]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	461a      	mov	r2, r3
 8004078:	f000 fa76 	bl	8004568 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2150      	movs	r1, #80	; 0x50
 8004082:	4618      	mov	r0, r3
 8004084:	f000 facf 	bl	8004626 <TIM_ITRx_SetConfig>
      break;
 8004088:	e02c      	b.n	80040e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6818      	ldr	r0, [r3, #0]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	6859      	ldr	r1, [r3, #4]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	461a      	mov	r2, r3
 8004098:	f000 fa95 	bl	80045c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2160      	movs	r1, #96	; 0x60
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 fabf 	bl	8004626 <TIM_ITRx_SetConfig>
      break;
 80040a8:	e01c      	b.n	80040e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6818      	ldr	r0, [r3, #0]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	6859      	ldr	r1, [r3, #4]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	461a      	mov	r2, r3
 80040b8:	f000 fa56 	bl	8004568 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2140      	movs	r1, #64	; 0x40
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 faaf 	bl	8004626 <TIM_ITRx_SetConfig>
      break;
 80040c8:	e00c      	b.n	80040e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4619      	mov	r1, r3
 80040d4:	4610      	mov	r0, r2
 80040d6:	f000 faa6 	bl	8004626 <TIM_ITRx_SetConfig>
      break;
 80040da:	e003      	b.n	80040e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	73fb      	strb	r3, [r7, #15]
      break;
 80040e0:	e000      	b.n	80040e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040fe:	b480      	push	{r7}
 8004100:	b083      	sub	sp, #12
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004126:	b480      	push	{r7}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
	...

08004150 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a34      	ldr	r2, [pc, #208]	; (8004234 <TIM_Base_SetConfig+0xe4>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d00f      	beq.n	8004188 <TIM_Base_SetConfig+0x38>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800416e:	d00b      	beq.n	8004188 <TIM_Base_SetConfig+0x38>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a31      	ldr	r2, [pc, #196]	; (8004238 <TIM_Base_SetConfig+0xe8>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d007      	beq.n	8004188 <TIM_Base_SetConfig+0x38>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a30      	ldr	r2, [pc, #192]	; (800423c <TIM_Base_SetConfig+0xec>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d003      	beq.n	8004188 <TIM_Base_SetConfig+0x38>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a2f      	ldr	r2, [pc, #188]	; (8004240 <TIM_Base_SetConfig+0xf0>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d108      	bne.n	800419a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a25      	ldr	r2, [pc, #148]	; (8004234 <TIM_Base_SetConfig+0xe4>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d01b      	beq.n	80041da <TIM_Base_SetConfig+0x8a>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a8:	d017      	beq.n	80041da <TIM_Base_SetConfig+0x8a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a22      	ldr	r2, [pc, #136]	; (8004238 <TIM_Base_SetConfig+0xe8>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d013      	beq.n	80041da <TIM_Base_SetConfig+0x8a>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a21      	ldr	r2, [pc, #132]	; (800423c <TIM_Base_SetConfig+0xec>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d00f      	beq.n	80041da <TIM_Base_SetConfig+0x8a>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a20      	ldr	r2, [pc, #128]	; (8004240 <TIM_Base_SetConfig+0xf0>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d00b      	beq.n	80041da <TIM_Base_SetConfig+0x8a>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a1f      	ldr	r2, [pc, #124]	; (8004244 <TIM_Base_SetConfig+0xf4>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d007      	beq.n	80041da <TIM_Base_SetConfig+0x8a>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a1e      	ldr	r2, [pc, #120]	; (8004248 <TIM_Base_SetConfig+0xf8>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d003      	beq.n	80041da <TIM_Base_SetConfig+0x8a>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a1d      	ldr	r2, [pc, #116]	; (800424c <TIM_Base_SetConfig+0xfc>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d108      	bne.n	80041ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	689a      	ldr	r2, [r3, #8]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a08      	ldr	r2, [pc, #32]	; (8004234 <TIM_Base_SetConfig+0xe4>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d103      	bne.n	8004220 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	615a      	str	r2, [r3, #20]
}
 8004226:	bf00      	nop
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	40010000 	.word	0x40010000
 8004238:	40000400 	.word	0x40000400
 800423c:	40000800 	.word	0x40000800
 8004240:	40000c00 	.word	0x40000c00
 8004244:	40014000 	.word	0x40014000
 8004248:	40014400 	.word	0x40014400
 800424c:	40014800 	.word	0x40014800

08004250 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004250:	b480      	push	{r7}
 8004252:	b087      	sub	sp, #28
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	f023 0201 	bic.w	r2, r3, #1
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800427e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f023 0303 	bic.w	r3, r3, #3
 8004286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	4313      	orrs	r3, r2
 8004290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f023 0302 	bic.w	r3, r3, #2
 8004298:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a1c      	ldr	r2, [pc, #112]	; (8004318 <TIM_OC1_SetConfig+0xc8>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d10c      	bne.n	80042c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f023 0308 	bic.w	r3, r3, #8
 80042b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f023 0304 	bic.w	r3, r3, #4
 80042c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a13      	ldr	r2, [pc, #76]	; (8004318 <TIM_OC1_SetConfig+0xc8>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d111      	bne.n	80042f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	621a      	str	r2, [r3, #32]
}
 800430c:	bf00      	nop
 800430e:	371c      	adds	r7, #28
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	40010000 	.word	0x40010000

0800431c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	f023 0210 	bic.w	r2, r3, #16
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800434a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	021b      	lsls	r3, r3, #8
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	4313      	orrs	r3, r2
 800435e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f023 0320 	bic.w	r3, r3, #32
 8004366:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	4313      	orrs	r3, r2
 8004372:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a1e      	ldr	r2, [pc, #120]	; (80043f0 <TIM_OC2_SetConfig+0xd4>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d10d      	bne.n	8004398 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004382:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	011b      	lsls	r3, r3, #4
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	4313      	orrs	r3, r2
 800438e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004396:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a15      	ldr	r2, [pc, #84]	; (80043f0 <TIM_OC2_SetConfig+0xd4>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d113      	bne.n	80043c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	621a      	str	r2, [r3, #32]
}
 80043e2:	bf00      	nop
 80043e4:	371c      	adds	r7, #28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	40010000 	.word	0x40010000

080043f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b087      	sub	sp, #28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f023 0303 	bic.w	r3, r3, #3
 800442a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	4313      	orrs	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800443c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	021b      	lsls	r3, r3, #8
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	4313      	orrs	r3, r2
 8004448:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a1d      	ldr	r2, [pc, #116]	; (80044c4 <TIM_OC3_SetConfig+0xd0>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d10d      	bne.n	800446e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004458:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	021b      	lsls	r3, r3, #8
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	4313      	orrs	r3, r2
 8004464:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800446c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a14      	ldr	r2, [pc, #80]	; (80044c4 <TIM_OC3_SetConfig+0xd0>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d113      	bne.n	800449e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800447c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004484:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4313      	orrs	r3, r2
 800449c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	621a      	str	r2, [r3, #32]
}
 80044b8:	bf00      	nop
 80044ba:	371c      	adds	r7, #28
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	40010000 	.word	0x40010000

080044c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b087      	sub	sp, #28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	021b      	lsls	r3, r3, #8
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	4313      	orrs	r3, r2
 800450a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004512:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	031b      	lsls	r3, r3, #12
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	4313      	orrs	r3, r2
 800451e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a10      	ldr	r2, [pc, #64]	; (8004564 <TIM_OC4_SetConfig+0x9c>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d109      	bne.n	800453c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800452e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	019b      	lsls	r3, r3, #6
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	4313      	orrs	r3, r2
 800453a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	621a      	str	r2, [r3, #32]
}
 8004556:	bf00      	nop
 8004558:	371c      	adds	r7, #28
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	40010000 	.word	0x40010000

08004568 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004568:	b480      	push	{r7}
 800456a:	b087      	sub	sp, #28
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	f023 0201 	bic.w	r2, r3, #1
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004592:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	011b      	lsls	r3, r3, #4
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	4313      	orrs	r3, r2
 800459c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f023 030a 	bic.w	r3, r3, #10
 80045a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	621a      	str	r2, [r3, #32]
}
 80045ba:	bf00      	nop
 80045bc:	371c      	adds	r7, #28
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b087      	sub	sp, #28
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	60f8      	str	r0, [r7, #12]
 80045ce:	60b9      	str	r1, [r7, #8]
 80045d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	f023 0210 	bic.w	r2, r3, #16
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	031b      	lsls	r3, r3, #12
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004602:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	011b      	lsls	r3, r3, #4
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	4313      	orrs	r3, r2
 800460c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	621a      	str	r2, [r3, #32]
}
 800461a:	bf00      	nop
 800461c:	371c      	adds	r7, #28
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004626:	b480      	push	{r7}
 8004628:	b085      	sub	sp, #20
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
 800462e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	4313      	orrs	r3, r2
 8004644:	f043 0307 	orr.w	r3, r3, #7
 8004648:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	609a      	str	r2, [r3, #8]
}
 8004650:	bf00      	nop
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800465c:	b480      	push	{r7}
 800465e:	b087      	sub	sp, #28
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
 8004668:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004676:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	021a      	lsls	r2, r3, #8
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	431a      	orrs	r2, r3
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	4313      	orrs	r3, r2
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	4313      	orrs	r3, r2
 8004688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	609a      	str	r2, [r3, #8]
}
 8004690:	bf00      	nop
 8004692:	371c      	adds	r7, #28
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800469c:	b480      	push	{r7}
 800469e:	b087      	sub	sp, #28
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	f003 031f 	and.w	r3, r3, #31
 80046ae:	2201      	movs	r2, #1
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6a1a      	ldr	r2, [r3, #32]
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	43db      	mvns	r3, r3
 80046be:	401a      	ands	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6a1a      	ldr	r2, [r3, #32]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	f003 031f 	and.w	r3, r3, #31
 80046ce:	6879      	ldr	r1, [r7, #4]
 80046d0:	fa01 f303 	lsl.w	r3, r1, r3
 80046d4:	431a      	orrs	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	621a      	str	r2, [r3, #32]
}
 80046da:	bf00      	nop
 80046dc:	371c      	adds	r7, #28
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
	...

080046e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d101      	bne.n	8004700 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046fc:	2302      	movs	r3, #2
 80046fe:	e050      	b.n	80047a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004726:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	4313      	orrs	r3, r2
 8004730:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a1c      	ldr	r2, [pc, #112]	; (80047b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d018      	beq.n	8004776 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800474c:	d013      	beq.n	8004776 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a18      	ldr	r2, [pc, #96]	; (80047b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d00e      	beq.n	8004776 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a16      	ldr	r2, [pc, #88]	; (80047b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d009      	beq.n	8004776 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a15      	ldr	r2, [pc, #84]	; (80047bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d004      	beq.n	8004776 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a13      	ldr	r2, [pc, #76]	; (80047c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d10c      	bne.n	8004790 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800477c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	4313      	orrs	r3, r2
 8004786:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	40010000 	.word	0x40010000
 80047b4:	40000400 	.word	0x40000400
 80047b8:	40000800 	.word	0x40000800
 80047bc:	40000c00 	.word	0x40000c00
 80047c0:	40014000 	.word	0x40014000

080047c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d101      	bne.n	80047e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80047dc:	2302      	movs	r3, #2
 80047de:	e03d      	b.n	800485c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	4313      	orrs	r3, r2
 8004802:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	4313      	orrs	r3, r2
 8004810:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4313      	orrs	r3, r2
 800481e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	4313      	orrs	r3, r2
 800482c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	4313      	orrs	r3, r2
 800483a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	4313      	orrs	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e03f      	b.n	8004922 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d106      	bne.n	80048bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7fd fa50 	bl	8001d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2224      	movs	r2, #36	; 0x24
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68da      	ldr	r2, [r3, #12]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 fa9b 	bl	8004e10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	691a      	ldr	r2, [r3, #16]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	695a      	ldr	r2, [r3, #20]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004908:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2220      	movs	r2, #32
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2220      	movs	r2, #32
 800491c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b084      	sub	sp, #16
 800492e:	af00      	add	r7, sp, #0
 8004930:	60f8      	str	r0, [r7, #12]
 8004932:	60b9      	str	r1, [r7, #8]
 8004934:	4613      	mov	r3, r2
 8004936:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b20      	cmp	r3, #32
 8004942:	d11d      	bne.n	8004980 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d002      	beq.n	8004950 <HAL_UART_Receive_DMA+0x26>
 800494a:	88fb      	ldrh	r3, [r7, #6]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e016      	b.n	8004982 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800495a:	2b01      	cmp	r3, #1
 800495c:	d101      	bne.n	8004962 <HAL_UART_Receive_DMA+0x38>
 800495e:	2302      	movs	r3, #2
 8004960:	e00f      	b.n	8004982 <HAL_UART_Receive_DMA+0x58>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004970:	88fb      	ldrh	r3, [r7, #6]
 8004972:	461a      	mov	r2, r3
 8004974:	68b9      	ldr	r1, [r7, #8]
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f000 f920 	bl	8004bbc <UART_Start_Receive_DMA>
 800497c:	4603      	mov	r3, r0
 800497e:	e000      	b.n	8004982 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004980:	2302      	movs	r3, #2
  }
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800498a:	b480      	push	{r7}
 800498c:	b083      	sub	sp, #12
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004992:	bf00      	nop
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800499e:	b480      	push	{r7}
 80049a0:	b083      	sub	sp, #12
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049a6:	bf00      	nop
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b083      	sub	sp, #12
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
 80049ba:	460b      	mov	r3, r1
 80049bc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b09c      	sub	sp, #112	; 0x70
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d172      	bne.n	8004acc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80049e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e8:	2200      	movs	r2, #0
 80049ea:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	330c      	adds	r3, #12
 80049f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049f6:	e853 3f00 	ldrex	r3, [r3]
 80049fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80049fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a02:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	330c      	adds	r3, #12
 8004a0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a0c:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a0e:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a14:	e841 2300 	strex	r3, r2, [r1]
 8004a18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1e5      	bne.n	80049ec <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3314      	adds	r3, #20
 8004a26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2a:	e853 3f00 	ldrex	r3, [r3]
 8004a2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a32:	f023 0301 	bic.w	r3, r3, #1
 8004a36:	667b      	str	r3, [r7, #100]	; 0x64
 8004a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3314      	adds	r3, #20
 8004a3e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004a40:	647a      	str	r2, [r7, #68]	; 0x44
 8004a42:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a48:	e841 2300 	strex	r3, r2, [r1]
 8004a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1e5      	bne.n	8004a20 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3314      	adds	r3, #20
 8004a5a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	e853 3f00 	ldrex	r3, [r3]
 8004a62:	623b      	str	r3, [r7, #32]
   return(result);
 8004a64:	6a3b      	ldr	r3, [r7, #32]
 8004a66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a6a:	663b      	str	r3, [r7, #96]	; 0x60
 8004a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	3314      	adds	r3, #20
 8004a72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004a74:	633a      	str	r2, [r7, #48]	; 0x30
 8004a76:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a7c:	e841 2300 	strex	r3, r2, [r1]
 8004a80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1e5      	bne.n	8004a54 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d119      	bne.n	8004acc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	330c      	adds	r3, #12
 8004a9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	e853 3f00 	ldrex	r3, [r3]
 8004aa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f023 0310 	bic.w	r3, r3, #16
 8004aae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	330c      	adds	r3, #12
 8004ab6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ab8:	61fa      	str	r2, [r7, #28]
 8004aba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abc:	69b9      	ldr	r1, [r7, #24]
 8004abe:	69fa      	ldr	r2, [r7, #28]
 8004ac0:	e841 2300 	strex	r3, r2, [r1]
 8004ac4:	617b      	str	r3, [r7, #20]
   return(result);
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1e5      	bne.n	8004a98 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d106      	bne.n	8004ae2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ad8:	4619      	mov	r1, r3
 8004ada:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004adc:	f7ff ff69 	bl	80049b2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ae0:	e002      	b.n	8004ae8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004ae2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004ae4:	f7fc f858 	bl	8000b98 <HAL_UART_RxCpltCallback>
}
 8004ae8:	bf00      	nop
 8004aea:	3770      	adds	r7, #112	; 0x70
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d108      	bne.n	8004b18 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b0a:	085b      	lsrs	r3, r3, #1
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	4619      	mov	r1, r3
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f7ff ff4e 	bl	80049b2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b16:	e002      	b.n	8004b1e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f7ff ff36 	bl	800498a <HAL_UART_RxHalfCpltCallback>
}
 8004b1e:	bf00      	nop
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b084      	sub	sp, #16
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b36:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b42:	2b80      	cmp	r3, #128	; 0x80
 8004b44:	bf0c      	ite	eq
 8004b46:	2301      	moveq	r3, #1
 8004b48:	2300      	movne	r3, #0
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b21      	cmp	r3, #33	; 0x21
 8004b58:	d108      	bne.n	8004b6c <UART_DMAError+0x46>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d005      	beq.n	8004b6c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2200      	movs	r2, #0
 8004b64:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004b66:	68b8      	ldr	r0, [r7, #8]
 8004b68:	f000 f8c6 	bl	8004cf8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b76:	2b40      	cmp	r3, #64	; 0x40
 8004b78:	bf0c      	ite	eq
 8004b7a:	2301      	moveq	r3, #1
 8004b7c:	2300      	movne	r3, #0
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b22      	cmp	r3, #34	; 0x22
 8004b8c:	d108      	bne.n	8004ba0 <UART_DMAError+0x7a>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d005      	beq.n	8004ba0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	2200      	movs	r2, #0
 8004b98:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004b9a:	68b8      	ldr	r0, [r7, #8]
 8004b9c:	f000 f8d4 	bl	8004d48 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba4:	f043 0210 	orr.w	r2, r3, #16
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bac:	68b8      	ldr	r0, [r7, #8]
 8004bae:	f7ff fef6 	bl	800499e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bb2:	bf00      	nop
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
	...

08004bbc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b098      	sub	sp, #96	; 0x60
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	88fa      	ldrh	r2, [r7, #6]
 8004bd4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2222      	movs	r2, #34	; 0x22
 8004be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be8:	4a40      	ldr	r2, [pc, #256]	; (8004cec <UART_Start_Receive_DMA+0x130>)
 8004bea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf0:	4a3f      	ldr	r2, [pc, #252]	; (8004cf0 <UART_Start_Receive_DMA+0x134>)
 8004bf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf8:	4a3e      	ldr	r2, [pc, #248]	; (8004cf4 <UART_Start_Receive_DMA+0x138>)
 8004bfa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c00:	2200      	movs	r2, #0
 8004c02:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004c04:	f107 0308 	add.w	r3, r7, #8
 8004c08:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	3304      	adds	r3, #4
 8004c14:	4619      	mov	r1, r3
 8004c16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	88fb      	ldrh	r3, [r7, #6]
 8004c1c:	f7fd fc00 	bl	8002420 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004c20:	2300      	movs	r3, #0
 8004c22:	613b      	str	r3, [r7, #16]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	613b      	str	r3, [r7, #16]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	613b      	str	r3, [r7, #16]
 8004c34:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d019      	beq.n	8004c7a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	330c      	adds	r3, #12
 8004c4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c50:	e853 3f00 	ldrex	r3, [r3]
 8004c54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	330c      	adds	r3, #12
 8004c64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c66:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004c68:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004c6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c6e:	e841 2300 	strex	r3, r2, [r1]
 8004c72:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004c74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1e5      	bne.n	8004c46 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	3314      	adds	r3, #20
 8004c80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c84:	e853 3f00 	ldrex	r3, [r3]
 8004c88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8c:	f043 0301 	orr.w	r3, r3, #1
 8004c90:	657b      	str	r3, [r7, #84]	; 0x54
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	3314      	adds	r3, #20
 8004c98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004c9a:	63ba      	str	r2, [r7, #56]	; 0x38
 8004c9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004ca0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ca2:	e841 2300 	strex	r3, r2, [r1]
 8004ca6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1e5      	bne.n	8004c7a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	3314      	adds	r3, #20
 8004cb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	e853 3f00 	ldrex	r3, [r3]
 8004cbc:	617b      	str	r3, [r7, #20]
   return(result);
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cc4:	653b      	str	r3, [r7, #80]	; 0x50
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	3314      	adds	r3, #20
 8004ccc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004cce:	627a      	str	r2, [r7, #36]	; 0x24
 8004cd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd2:	6a39      	ldr	r1, [r7, #32]
 8004cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd6:	e841 2300 	strex	r3, r2, [r1]
 8004cda:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1e5      	bne.n	8004cae <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3760      	adds	r7, #96	; 0x60
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	080049cb 	.word	0x080049cb
 8004cf0:	08004af1 	.word	0x08004af1
 8004cf4:	08004b27 	.word	0x08004b27

08004cf8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b089      	sub	sp, #36	; 0x24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	330c      	adds	r3, #12
 8004d06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	e853 3f00 	ldrex	r3, [r3]
 8004d0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004d16:	61fb      	str	r3, [r7, #28]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	330c      	adds	r3, #12
 8004d1e:	69fa      	ldr	r2, [r7, #28]
 8004d20:	61ba      	str	r2, [r7, #24]
 8004d22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d24:	6979      	ldr	r1, [r7, #20]
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	e841 2300 	strex	r3, r2, [r1]
 8004d2c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1e5      	bne.n	8004d00 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2220      	movs	r2, #32
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004d3c:	bf00      	nop
 8004d3e:	3724      	adds	r7, #36	; 0x24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b095      	sub	sp, #84	; 0x54
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	330c      	adds	r3, #12
 8004d56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5a:	e853 3f00 	ldrex	r3, [r3]
 8004d5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	330c      	adds	r3, #12
 8004d6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d70:	643a      	str	r2, [r7, #64]	; 0x40
 8004d72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d78:	e841 2300 	strex	r3, r2, [r1]
 8004d7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1e5      	bne.n	8004d50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3314      	adds	r3, #20
 8004d8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	e853 3f00 	ldrex	r3, [r3]
 8004d92:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	f023 0301 	bic.w	r3, r3, #1
 8004d9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3314      	adds	r3, #20
 8004da2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004da4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004da6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004daa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dac:	e841 2300 	strex	r3, r2, [r1]
 8004db0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1e5      	bne.n	8004d84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d119      	bne.n	8004df4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	330c      	adds	r3, #12
 8004dc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	e853 3f00 	ldrex	r3, [r3]
 8004dce:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	f023 0310 	bic.w	r3, r3, #16
 8004dd6:	647b      	str	r3, [r7, #68]	; 0x44
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	330c      	adds	r3, #12
 8004dde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004de0:	61ba      	str	r2, [r7, #24]
 8004de2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de4:	6979      	ldr	r1, [r7, #20]
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	e841 2300 	strex	r3, r2, [r1]
 8004dec:	613b      	str	r3, [r7, #16]
   return(result);
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1e5      	bne.n	8004dc0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2220      	movs	r2, #32
 8004df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e02:	bf00      	nop
 8004e04:	3754      	adds	r7, #84	; 0x54
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
	...

08004e10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e14:	b0c0      	sub	sp, #256	; 0x100
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e2c:	68d9      	ldr	r1, [r3, #12]
 8004e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	ea40 0301 	orr.w	r3, r0, r1
 8004e38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e3e:	689a      	ldr	r2, [r3, #8]
 8004e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	431a      	orrs	r2, r3
 8004e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e68:	f021 010c 	bic.w	r1, r1, #12
 8004e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e76:	430b      	orrs	r3, r1
 8004e78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e8a:	6999      	ldr	r1, [r3, #24]
 8004e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	ea40 0301 	orr.w	r3, r0, r1
 8004e96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	4b8f      	ldr	r3, [pc, #572]	; (80050dc <UART_SetConfig+0x2cc>)
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d005      	beq.n	8004eb0 <UART_SetConfig+0xa0>
 8004ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	4b8d      	ldr	r3, [pc, #564]	; (80050e0 <UART_SetConfig+0x2d0>)
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d104      	bne.n	8004eba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004eb0:	f7fe fb9a 	bl	80035e8 <HAL_RCC_GetPCLK2Freq>
 8004eb4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004eb8:	e003      	b.n	8004ec2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004eba:	f7fe fb81 	bl	80035c0 <HAL_RCC_GetPCLK1Freq>
 8004ebe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec6:	69db      	ldr	r3, [r3, #28]
 8004ec8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ecc:	f040 810c 	bne.w	80050e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ed0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004eda:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004ede:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004ee2:	4622      	mov	r2, r4
 8004ee4:	462b      	mov	r3, r5
 8004ee6:	1891      	adds	r1, r2, r2
 8004ee8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004eea:	415b      	adcs	r3, r3
 8004eec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004eee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ef2:	4621      	mov	r1, r4
 8004ef4:	eb12 0801 	adds.w	r8, r2, r1
 8004ef8:	4629      	mov	r1, r5
 8004efa:	eb43 0901 	adc.w	r9, r3, r1
 8004efe:	f04f 0200 	mov.w	r2, #0
 8004f02:	f04f 0300 	mov.w	r3, #0
 8004f06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f12:	4690      	mov	r8, r2
 8004f14:	4699      	mov	r9, r3
 8004f16:	4623      	mov	r3, r4
 8004f18:	eb18 0303 	adds.w	r3, r8, r3
 8004f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f20:	462b      	mov	r3, r5
 8004f22:	eb49 0303 	adc.w	r3, r9, r3
 8004f26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f36:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004f3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004f3e:	460b      	mov	r3, r1
 8004f40:	18db      	adds	r3, r3, r3
 8004f42:	653b      	str	r3, [r7, #80]	; 0x50
 8004f44:	4613      	mov	r3, r2
 8004f46:	eb42 0303 	adc.w	r3, r2, r3
 8004f4a:	657b      	str	r3, [r7, #84]	; 0x54
 8004f4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004f54:	f7fb fc9e 	bl	8000894 <__aeabi_uldivmod>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	4b61      	ldr	r3, [pc, #388]	; (80050e4 <UART_SetConfig+0x2d4>)
 8004f5e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f62:	095b      	lsrs	r3, r3, #5
 8004f64:	011c      	lsls	r4, r3, #4
 8004f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f70:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004f74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f78:	4642      	mov	r2, r8
 8004f7a:	464b      	mov	r3, r9
 8004f7c:	1891      	adds	r1, r2, r2
 8004f7e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f80:	415b      	adcs	r3, r3
 8004f82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f88:	4641      	mov	r1, r8
 8004f8a:	eb12 0a01 	adds.w	sl, r2, r1
 8004f8e:	4649      	mov	r1, r9
 8004f90:	eb43 0b01 	adc.w	fp, r3, r1
 8004f94:	f04f 0200 	mov.w	r2, #0
 8004f98:	f04f 0300 	mov.w	r3, #0
 8004f9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fa0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004fa4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fa8:	4692      	mov	sl, r2
 8004faa:	469b      	mov	fp, r3
 8004fac:	4643      	mov	r3, r8
 8004fae:	eb1a 0303 	adds.w	r3, sl, r3
 8004fb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fb6:	464b      	mov	r3, r9
 8004fb8:	eb4b 0303 	adc.w	r3, fp, r3
 8004fbc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004fcc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004fd0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	18db      	adds	r3, r3, r3
 8004fd8:	643b      	str	r3, [r7, #64]	; 0x40
 8004fda:	4613      	mov	r3, r2
 8004fdc:	eb42 0303 	adc.w	r3, r2, r3
 8004fe0:	647b      	str	r3, [r7, #68]	; 0x44
 8004fe2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004fe6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004fea:	f7fb fc53 	bl	8000894 <__aeabi_uldivmod>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	4611      	mov	r1, r2
 8004ff4:	4b3b      	ldr	r3, [pc, #236]	; (80050e4 <UART_SetConfig+0x2d4>)
 8004ff6:	fba3 2301 	umull	r2, r3, r3, r1
 8004ffa:	095b      	lsrs	r3, r3, #5
 8004ffc:	2264      	movs	r2, #100	; 0x64
 8004ffe:	fb02 f303 	mul.w	r3, r2, r3
 8005002:	1acb      	subs	r3, r1, r3
 8005004:	00db      	lsls	r3, r3, #3
 8005006:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800500a:	4b36      	ldr	r3, [pc, #216]	; (80050e4 <UART_SetConfig+0x2d4>)
 800500c:	fba3 2302 	umull	r2, r3, r3, r2
 8005010:	095b      	lsrs	r3, r3, #5
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005018:	441c      	add	r4, r3
 800501a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800501e:	2200      	movs	r2, #0
 8005020:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005024:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005028:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800502c:	4642      	mov	r2, r8
 800502e:	464b      	mov	r3, r9
 8005030:	1891      	adds	r1, r2, r2
 8005032:	63b9      	str	r1, [r7, #56]	; 0x38
 8005034:	415b      	adcs	r3, r3
 8005036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005038:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800503c:	4641      	mov	r1, r8
 800503e:	1851      	adds	r1, r2, r1
 8005040:	6339      	str	r1, [r7, #48]	; 0x30
 8005042:	4649      	mov	r1, r9
 8005044:	414b      	adcs	r3, r1
 8005046:	637b      	str	r3, [r7, #52]	; 0x34
 8005048:	f04f 0200 	mov.w	r2, #0
 800504c:	f04f 0300 	mov.w	r3, #0
 8005050:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005054:	4659      	mov	r1, fp
 8005056:	00cb      	lsls	r3, r1, #3
 8005058:	4651      	mov	r1, sl
 800505a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800505e:	4651      	mov	r1, sl
 8005060:	00ca      	lsls	r2, r1, #3
 8005062:	4610      	mov	r0, r2
 8005064:	4619      	mov	r1, r3
 8005066:	4603      	mov	r3, r0
 8005068:	4642      	mov	r2, r8
 800506a:	189b      	adds	r3, r3, r2
 800506c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005070:	464b      	mov	r3, r9
 8005072:	460a      	mov	r2, r1
 8005074:	eb42 0303 	adc.w	r3, r2, r3
 8005078:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800507c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005088:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800508c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005090:	460b      	mov	r3, r1
 8005092:	18db      	adds	r3, r3, r3
 8005094:	62bb      	str	r3, [r7, #40]	; 0x28
 8005096:	4613      	mov	r3, r2
 8005098:	eb42 0303 	adc.w	r3, r2, r3
 800509c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800509e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80050a6:	f7fb fbf5 	bl	8000894 <__aeabi_uldivmod>
 80050aa:	4602      	mov	r2, r0
 80050ac:	460b      	mov	r3, r1
 80050ae:	4b0d      	ldr	r3, [pc, #52]	; (80050e4 <UART_SetConfig+0x2d4>)
 80050b0:	fba3 1302 	umull	r1, r3, r3, r2
 80050b4:	095b      	lsrs	r3, r3, #5
 80050b6:	2164      	movs	r1, #100	; 0x64
 80050b8:	fb01 f303 	mul.w	r3, r1, r3
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	3332      	adds	r3, #50	; 0x32
 80050c2:	4a08      	ldr	r2, [pc, #32]	; (80050e4 <UART_SetConfig+0x2d4>)
 80050c4:	fba2 2303 	umull	r2, r3, r2, r3
 80050c8:	095b      	lsrs	r3, r3, #5
 80050ca:	f003 0207 	and.w	r2, r3, #7
 80050ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4422      	add	r2, r4
 80050d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80050d8:	e105      	b.n	80052e6 <UART_SetConfig+0x4d6>
 80050da:	bf00      	nop
 80050dc:	40011000 	.word	0x40011000
 80050e0:	40011400 	.word	0x40011400
 80050e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050ec:	2200      	movs	r2, #0
 80050ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80050f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80050f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80050fa:	4642      	mov	r2, r8
 80050fc:	464b      	mov	r3, r9
 80050fe:	1891      	adds	r1, r2, r2
 8005100:	6239      	str	r1, [r7, #32]
 8005102:	415b      	adcs	r3, r3
 8005104:	627b      	str	r3, [r7, #36]	; 0x24
 8005106:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800510a:	4641      	mov	r1, r8
 800510c:	1854      	adds	r4, r2, r1
 800510e:	4649      	mov	r1, r9
 8005110:	eb43 0501 	adc.w	r5, r3, r1
 8005114:	f04f 0200 	mov.w	r2, #0
 8005118:	f04f 0300 	mov.w	r3, #0
 800511c:	00eb      	lsls	r3, r5, #3
 800511e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005122:	00e2      	lsls	r2, r4, #3
 8005124:	4614      	mov	r4, r2
 8005126:	461d      	mov	r5, r3
 8005128:	4643      	mov	r3, r8
 800512a:	18e3      	adds	r3, r4, r3
 800512c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005130:	464b      	mov	r3, r9
 8005132:	eb45 0303 	adc.w	r3, r5, r3
 8005136:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800513a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005146:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800514a:	f04f 0200 	mov.w	r2, #0
 800514e:	f04f 0300 	mov.w	r3, #0
 8005152:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005156:	4629      	mov	r1, r5
 8005158:	008b      	lsls	r3, r1, #2
 800515a:	4621      	mov	r1, r4
 800515c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005160:	4621      	mov	r1, r4
 8005162:	008a      	lsls	r2, r1, #2
 8005164:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005168:	f7fb fb94 	bl	8000894 <__aeabi_uldivmod>
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	4b60      	ldr	r3, [pc, #384]	; (80052f4 <UART_SetConfig+0x4e4>)
 8005172:	fba3 2302 	umull	r2, r3, r3, r2
 8005176:	095b      	lsrs	r3, r3, #5
 8005178:	011c      	lsls	r4, r3, #4
 800517a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800517e:	2200      	movs	r2, #0
 8005180:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005184:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005188:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800518c:	4642      	mov	r2, r8
 800518e:	464b      	mov	r3, r9
 8005190:	1891      	adds	r1, r2, r2
 8005192:	61b9      	str	r1, [r7, #24]
 8005194:	415b      	adcs	r3, r3
 8005196:	61fb      	str	r3, [r7, #28]
 8005198:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800519c:	4641      	mov	r1, r8
 800519e:	1851      	adds	r1, r2, r1
 80051a0:	6139      	str	r1, [r7, #16]
 80051a2:	4649      	mov	r1, r9
 80051a4:	414b      	adcs	r3, r1
 80051a6:	617b      	str	r3, [r7, #20]
 80051a8:	f04f 0200 	mov.w	r2, #0
 80051ac:	f04f 0300 	mov.w	r3, #0
 80051b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051b4:	4659      	mov	r1, fp
 80051b6:	00cb      	lsls	r3, r1, #3
 80051b8:	4651      	mov	r1, sl
 80051ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051be:	4651      	mov	r1, sl
 80051c0:	00ca      	lsls	r2, r1, #3
 80051c2:	4610      	mov	r0, r2
 80051c4:	4619      	mov	r1, r3
 80051c6:	4603      	mov	r3, r0
 80051c8:	4642      	mov	r2, r8
 80051ca:	189b      	adds	r3, r3, r2
 80051cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051d0:	464b      	mov	r3, r9
 80051d2:	460a      	mov	r2, r1
 80051d4:	eb42 0303 	adc.w	r3, r2, r3
 80051d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80051e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	f04f 0300 	mov.w	r3, #0
 80051f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80051f4:	4649      	mov	r1, r9
 80051f6:	008b      	lsls	r3, r1, #2
 80051f8:	4641      	mov	r1, r8
 80051fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051fe:	4641      	mov	r1, r8
 8005200:	008a      	lsls	r2, r1, #2
 8005202:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005206:	f7fb fb45 	bl	8000894 <__aeabi_uldivmod>
 800520a:	4602      	mov	r2, r0
 800520c:	460b      	mov	r3, r1
 800520e:	4b39      	ldr	r3, [pc, #228]	; (80052f4 <UART_SetConfig+0x4e4>)
 8005210:	fba3 1302 	umull	r1, r3, r3, r2
 8005214:	095b      	lsrs	r3, r3, #5
 8005216:	2164      	movs	r1, #100	; 0x64
 8005218:	fb01 f303 	mul.w	r3, r1, r3
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	3332      	adds	r3, #50	; 0x32
 8005222:	4a34      	ldr	r2, [pc, #208]	; (80052f4 <UART_SetConfig+0x4e4>)
 8005224:	fba2 2303 	umull	r2, r3, r2, r3
 8005228:	095b      	lsrs	r3, r3, #5
 800522a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800522e:	441c      	add	r4, r3
 8005230:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005234:	2200      	movs	r2, #0
 8005236:	673b      	str	r3, [r7, #112]	; 0x70
 8005238:	677a      	str	r2, [r7, #116]	; 0x74
 800523a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800523e:	4642      	mov	r2, r8
 8005240:	464b      	mov	r3, r9
 8005242:	1891      	adds	r1, r2, r2
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	415b      	adcs	r3, r3
 8005248:	60fb      	str	r3, [r7, #12]
 800524a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800524e:	4641      	mov	r1, r8
 8005250:	1851      	adds	r1, r2, r1
 8005252:	6039      	str	r1, [r7, #0]
 8005254:	4649      	mov	r1, r9
 8005256:	414b      	adcs	r3, r1
 8005258:	607b      	str	r3, [r7, #4]
 800525a:	f04f 0200 	mov.w	r2, #0
 800525e:	f04f 0300 	mov.w	r3, #0
 8005262:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005266:	4659      	mov	r1, fp
 8005268:	00cb      	lsls	r3, r1, #3
 800526a:	4651      	mov	r1, sl
 800526c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005270:	4651      	mov	r1, sl
 8005272:	00ca      	lsls	r2, r1, #3
 8005274:	4610      	mov	r0, r2
 8005276:	4619      	mov	r1, r3
 8005278:	4603      	mov	r3, r0
 800527a:	4642      	mov	r2, r8
 800527c:	189b      	adds	r3, r3, r2
 800527e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005280:	464b      	mov	r3, r9
 8005282:	460a      	mov	r2, r1
 8005284:	eb42 0303 	adc.w	r3, r2, r3
 8005288:	66fb      	str	r3, [r7, #108]	; 0x6c
 800528a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	663b      	str	r3, [r7, #96]	; 0x60
 8005294:	667a      	str	r2, [r7, #100]	; 0x64
 8005296:	f04f 0200 	mov.w	r2, #0
 800529a:	f04f 0300 	mov.w	r3, #0
 800529e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80052a2:	4649      	mov	r1, r9
 80052a4:	008b      	lsls	r3, r1, #2
 80052a6:	4641      	mov	r1, r8
 80052a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052ac:	4641      	mov	r1, r8
 80052ae:	008a      	lsls	r2, r1, #2
 80052b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80052b4:	f7fb faee 	bl	8000894 <__aeabi_uldivmod>
 80052b8:	4602      	mov	r2, r0
 80052ba:	460b      	mov	r3, r1
 80052bc:	4b0d      	ldr	r3, [pc, #52]	; (80052f4 <UART_SetConfig+0x4e4>)
 80052be:	fba3 1302 	umull	r1, r3, r3, r2
 80052c2:	095b      	lsrs	r3, r3, #5
 80052c4:	2164      	movs	r1, #100	; 0x64
 80052c6:	fb01 f303 	mul.w	r3, r1, r3
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	011b      	lsls	r3, r3, #4
 80052ce:	3332      	adds	r3, #50	; 0x32
 80052d0:	4a08      	ldr	r2, [pc, #32]	; (80052f4 <UART_SetConfig+0x4e4>)
 80052d2:	fba2 2303 	umull	r2, r3, r2, r3
 80052d6:	095b      	lsrs	r3, r3, #5
 80052d8:	f003 020f 	and.w	r2, r3, #15
 80052dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4422      	add	r2, r4
 80052e4:	609a      	str	r2, [r3, #8]
}
 80052e6:	bf00      	nop
 80052e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80052ec:	46bd      	mov	sp, r7
 80052ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052f2:	bf00      	nop
 80052f4:	51eb851f 	.word	0x51eb851f

080052f8 <__libc_init_array>:
 80052f8:	b570      	push	{r4, r5, r6, lr}
 80052fa:	4d0d      	ldr	r5, [pc, #52]	; (8005330 <__libc_init_array+0x38>)
 80052fc:	4c0d      	ldr	r4, [pc, #52]	; (8005334 <__libc_init_array+0x3c>)
 80052fe:	1b64      	subs	r4, r4, r5
 8005300:	10a4      	asrs	r4, r4, #2
 8005302:	2600      	movs	r6, #0
 8005304:	42a6      	cmp	r6, r4
 8005306:	d109      	bne.n	800531c <__libc_init_array+0x24>
 8005308:	4d0b      	ldr	r5, [pc, #44]	; (8005338 <__libc_init_array+0x40>)
 800530a:	4c0c      	ldr	r4, [pc, #48]	; (800533c <__libc_init_array+0x44>)
 800530c:	f000 f866 	bl	80053dc <_init>
 8005310:	1b64      	subs	r4, r4, r5
 8005312:	10a4      	asrs	r4, r4, #2
 8005314:	2600      	movs	r6, #0
 8005316:	42a6      	cmp	r6, r4
 8005318:	d105      	bne.n	8005326 <__libc_init_array+0x2e>
 800531a:	bd70      	pop	{r4, r5, r6, pc}
 800531c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005320:	4798      	blx	r3
 8005322:	3601      	adds	r6, #1
 8005324:	e7ee      	b.n	8005304 <__libc_init_array+0xc>
 8005326:	f855 3b04 	ldr.w	r3, [r5], #4
 800532a:	4798      	blx	r3
 800532c:	3601      	adds	r6, #1
 800532e:	e7f2      	b.n	8005316 <__libc_init_array+0x1e>
 8005330:	0800541c 	.word	0x0800541c
 8005334:	0800541c 	.word	0x0800541c
 8005338:	0800541c 	.word	0x0800541c
 800533c:	08005420 	.word	0x08005420

08005340 <memset>:
 8005340:	4402      	add	r2, r0
 8005342:	4603      	mov	r3, r0
 8005344:	4293      	cmp	r3, r2
 8005346:	d100      	bne.n	800534a <memset+0xa>
 8005348:	4770      	bx	lr
 800534a:	f803 1b01 	strb.w	r1, [r3], #1
 800534e:	e7f9      	b.n	8005344 <memset+0x4>

08005350 <round>:
 8005350:	ec51 0b10 	vmov	r0, r1, d0
 8005354:	b570      	push	{r4, r5, r6, lr}
 8005356:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800535a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800535e:	2c13      	cmp	r4, #19
 8005360:	ee10 2a10 	vmov	r2, s0
 8005364:	460b      	mov	r3, r1
 8005366:	dc19      	bgt.n	800539c <round+0x4c>
 8005368:	2c00      	cmp	r4, #0
 800536a:	da09      	bge.n	8005380 <round+0x30>
 800536c:	3401      	adds	r4, #1
 800536e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8005372:	d103      	bne.n	800537c <round+0x2c>
 8005374:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005378:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800537c:	2200      	movs	r2, #0
 800537e:	e028      	b.n	80053d2 <round+0x82>
 8005380:	4d15      	ldr	r5, [pc, #84]	; (80053d8 <round+0x88>)
 8005382:	4125      	asrs	r5, r4
 8005384:	ea01 0605 	and.w	r6, r1, r5
 8005388:	4332      	orrs	r2, r6
 800538a:	d00e      	beq.n	80053aa <round+0x5a>
 800538c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005390:	fa42 f404 	asr.w	r4, r2, r4
 8005394:	4423      	add	r3, r4
 8005396:	ea23 0305 	bic.w	r3, r3, r5
 800539a:	e7ef      	b.n	800537c <round+0x2c>
 800539c:	2c33      	cmp	r4, #51	; 0x33
 800539e:	dd07      	ble.n	80053b0 <round+0x60>
 80053a0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80053a4:	d101      	bne.n	80053aa <round+0x5a>
 80053a6:	f7fb f847 	bl	8000438 <__adddf3>
 80053aa:	ec41 0b10 	vmov	d0, r0, r1
 80053ae:	bd70      	pop	{r4, r5, r6, pc}
 80053b0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80053b4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80053b8:	40f5      	lsrs	r5, r6
 80053ba:	4228      	tst	r0, r5
 80053bc:	d0f5      	beq.n	80053aa <round+0x5a>
 80053be:	2101      	movs	r1, #1
 80053c0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80053c4:	fa01 f404 	lsl.w	r4, r1, r4
 80053c8:	1912      	adds	r2, r2, r4
 80053ca:	bf28      	it	cs
 80053cc:	185b      	addcs	r3, r3, r1
 80053ce:	ea22 0205 	bic.w	r2, r2, r5
 80053d2:	4619      	mov	r1, r3
 80053d4:	4610      	mov	r0, r2
 80053d6:	e7e8      	b.n	80053aa <round+0x5a>
 80053d8:	000fffff 	.word	0x000fffff

080053dc <_init>:
 80053dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053de:	bf00      	nop
 80053e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053e2:	bc08      	pop	{r3}
 80053e4:	469e      	mov	lr, r3
 80053e6:	4770      	bx	lr

080053e8 <_fini>:
 80053e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ea:	bf00      	nop
 80053ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ee:	bc08      	pop	{r3}
 80053f0:	469e      	mov	lr, r3
 80053f2:	4770      	bx	lr
